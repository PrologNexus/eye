@prefix rule: <http://eyereasoner.github.io/rule#>.
@prefix : <http://example.org/disjunction-elimination#>.

# saying A means saying C
[] a rule:ForwardRule;
    rule:premise (
        (_:S :saying :A)
    );
    rule:conclusion (
        (_:S :saying :C)
    ).

[] a rule:ForwardRule;
    rule:premise (
        (_:S :not_saying :C)
    );
    rule:conclusion (
        (_:S :not_saying :A)
    ).

# saying B means saying C
[] a rule:ForwardRule;
    rule:premise (
        (_:S :saying :B)
    );
    rule:conclusion (
        (_:S :saying :C)
    ).

[] a rule:ForwardRule;
    rule:premise (
        (_:S :not_saying :C)
    );
    rule:conclusion (
        (_:S :not_saying :B)
    ).

# saying A or saying B
[] a rule:ForwardRule;
    rule:premise (
        (_:S :not_saying :A)
    );
    rule:conclusion (
        (_:S :saying :B)
    ).

[] a rule:ForwardRule;
    rule:premise (
        (_:S :not_saying :B)
    );
    rule:conclusion (
        (_:S :saying :A)
    ).

# assuming the negation of the query so that
# it can be discharged when the query succeeds
:alice :not_saying :C.

# query
[] a rule:QueryRule;
    rule:premise (
        (:alice :saying :C)
    );
    rule:conclusion (
        (:alice :saying :C)
    ).
