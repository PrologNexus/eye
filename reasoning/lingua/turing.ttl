@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix : <http://example.org/ns#>.

# interpreter for Turing machine
:turing_rule1 a lingua:BackwardRule;
    lingua:conclusion (
        () :compute _:OutTape
    );
    lingua:premise (
        _:Machine :start _:I
        (_:I () "#" ()) :find _:OutTape
    ).

:turing_rule2 a lingua:BackwardRule;
    lingua:conclusion (
        _:List :compute _:OutTape
    );
    lingua:premise (
        _:List list:firstRest (_:Head _:Tail)
        _:Machine :start _:I
        (_:I () _:Head _:Tail) :find _:OutTape
    ).

:turing_rule3 a lingua:BackwardRule;
    lingua:conclusion (
        (_:State _:Left _:Cell _:Right) :find _:OutTape
    );
    lingua:premise (
        (_:State _:Cell _:Write _:Move) :tape _:Next
        (_:Move _:Left _:Write _:Right _:A _:B _:C) :move true
        (_:Next _:A _:B _:C) :continue _:OutTape
    ).

:turing_rule4 a lingua:BackwardRule;
    lingua:conclusion (
        (:halt _:Left _:Cell _:Right) :continue _:OutTape
    );
    lingua:premise (
        _:Left :reverse _:R
        _:List list:firstRest (_:Cell _:Right)
        (_:R _:List) list:append _:OutTape
    ).

:turing_rule5 a lingua:BackwardRule;
    lingua:conclusion (
        (_:State _:Left _:Cell _:Right) :continue _:OutTape
    );
    lingua:premise (
        (_:State _:Left _:Cell _:Right) :find _:OutTape
    ).

:turing_rule6 a lingua:BackwardRule;
    lingua:conclusion (
        (:left () _:Cell _:Right () "#" _:L) :move true
    );
    lingua:premise (
        _:L list:firstRest (_:Cell _:Right)
    ).

:turing_rule7 a lingua:BackwardRule;
    lingua:conclusion (
        (:left _:List _:Cell _:Right _:Tail _:Head _:L) :move true
    );
    lingua:premise (
        _:List list:firstRest (_:Head _:Tail)
        _:L list:firstRest (_:Cell _:Right)
    ).

:turing_rule8 a lingua:BackwardRule;
    lingua:conclusion (
        (:stop _:Left _:Cell _:Right _:Left _:Cell _:Right) :move true
    );
    lingua:premise ().

:turing_rule9 a lingua:BackwardRule;
    lingua:conclusion (
        (:right _:Left _:Cell () _:L "#" ()) :move true
    );
    lingua:premise (
        _:L list:firstRest (_:Cell _:Left)
    ).

:turing_rule10 a lingua:BackwardRule;
    lingua:conclusion (
        (:right _:Left _:Cell _:List _:L _:Head _:Tail) :move true
    );
    lingua:premise (
        _:List list:firstRest (_:Head _:Tail)
        _:L list:firstRest (_:Cell _:Left)
    ).

:turing_rule11 a lingua:BackwardRule;
    lingua:conclusion (
        () :reverse ()
    );
    lingua:premise ().

:turing_rule12 a lingua:BackwardRule;
    lingua:conclusion (
        _:List :reverse _:Reverse
    );
    lingua:premise (
        _:List list:firstRest (_:Head _:Tail)
        _:Tail :reverse _:R
        (_:R (_:Head)) list:append _:Reverse
    ).

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
:turing_query a lingua:QueryRule;
    lingua:premise (
        (1 0 1 0 0 1) :compute _:A1
        (1 0 1 1 1 1) :compute _:A2
        (1 1 1 1 1 1) :compute _:A3
        () :compute _:A4
    );
    lingua:conclusion (
        (1 0 1 0 0 1) :compute _:A1
        (1 0 1 1 1 1) :compute _:A2
        (1 1 1 1 1 1) :compute _:A3
        () :compute _:A4
    ).
