@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <urn:example:>.

# accessibility relations between possible worlds
:normativeWorld1 log:hasAccessTo :normativeWorld1, :normativeWorld2.
:normativeWorld2 log:hasAccessTo :normativeWorld2, :normativeWorld1.
:observedWorld log:hasAccessTo :observedWorld, :normativeWorld1, :normativeWorld2.

# propositions that are true in possible worlds
# normativeWorld1
{ :alcoholicBeverage :sellingTo :adult } log:holdsIn :normativeWorld1.
{ () log:onNegativeSurface { :alcoholicBeverage :sellingTo :nonAdult } } log:holdsIn :normativeWorld1.

# normativeWorld2
{ () log:onNegativeSurface { :alcoholicBeverage :sellingTo :nonAdult } } log:holdsIn :normativeWorld2.

# observedWorld
{ :alcoholicBeverage :sellingTo :adult } log:holdsIn :observedWorld.
# the following will blow an inference fuse
#{ :alcoholicBeverage :sellingTo :nonAdult } log:holdsIn :observedWorld.

# P is obligatory in world W if P holds in all worlds accessible from W
(_:W1 _:W _:P _:W2 _:Sc) log:onNegativeSurface {
    _:W1 log:hasAccessTo _:W.
    _:P log:holdsIn _:W1.
    ({ _:W1 log:hasAccessTo _:W2 } { _:P log:holdsIn _:W2 }) log:forAllIn _:Sc.
    () log:onNegativeSurface {
        _:P log:isObligatoryIn _:W1.
    }.
}.

# P is permitted in world W if P holds in at least one world accessible from W
(_:W1 _:W2 _:P) log:onNegativeSurface {
    _:W1 log:hasAccessTo _:W2.
    _:P log:holdsIn _:W2.
    () log:onNegativeSurface {
        _:P log:isPermittedIn _:W1.
    }.
}.

# P is forbidden in world W if P does not hold in any world accessible from W
(_:W1 _:W _:P _:W2 _:Sc) log:onNegativeSurface {
    _:W1 log:hasAccessTo _:W.
    { () log:onNegativeSurface _:P } log:holdsIn _:W1.
    ({ _:W1 log:hasAccessTo _:W2 } { { () log:onNegativeSurface _:P } log:holdsIn _:W2 }) log:forAllIn _:Sc.
    () log:onNegativeSurface {
        _:P log:isForbiddenIn _:W1.
    }.
}.

# K axiom
(_:W1 _:W _:S1 _:P1 _:O1 _:S2 _:P2 _:O2) log:onNegativeSurface {
    _:W1 log:hasAccessTo _:W.
    { () log:onNegativeSurface { _:S1 _:P1 _:O1. () log:onNegativeSurface { _:S2 _:P2 _:O2 } } } log:holdsIn _:W1.
    { _:S1 _:P1 _:O1 } log:isObligatoryIn _:W1.
    () log:onNegativeSurface {
        { _:S2 _:P2 _:O2 } log:isObligatoryIn _:W1.
    }.
}.

# inconsistency detection
(_:P _:W) log:onNegativeSurface {
    _:P log:holdsIn :observedWorld.
    _:P log:isForbiddenIn _:W.
}.

# query
(_:Q _:W) log:onNegativeSurface {
    _:Q log:isObligatoryIn _:W.
    () log:onNegativeAnswerSurface {
        _:Q log:isObligatoryIn _:W.
    }.
}.

(_:Q _:W) log:onNegativeSurface {
    _:Q log:isPermittedIn _:W.
    () log:onNegativeAnswerSurface {
        _:Q log:isPermittedIn _:W.
    }.
}.

(_:Q _:W) log:onNegativeSurface {
    _:Q log:isForbiddenIn _:W.
    () log:onNegativeAnswerSurface {
        _:Q log:isForbiddenIn _:W.
    }.
}.
