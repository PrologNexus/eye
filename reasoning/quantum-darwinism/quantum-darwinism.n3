# original code generated by ChatGPT

@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix : <http://example.org/quantum#> .

# === Initial Quantum States ===

:state1 a :QuantumState ; :hasAmplitude 0.9 ; :isPointerState true .
:state2 a :QuantumState ; :hasAmplitude 0.4 .
:state3 a :QuantumState ; :hasAmplitude 0.9 ; :isPointerState true .
:state4 a :QuantumState ; :hasAmplitude 0.3 .

# === Entanglement ===

:state1 :entangledWith :state3 .
:state2 :entangledWith :state4 .

# === Decoherence ===

{ ?S a :QuantumState ; :isPointerState true } => { ?S :hasDecohered true } .
{ ?S1 :hasDecohered true ; :entangledWith ?S2 } => { ?S2 :hasDecohered true } .
{ ?S :hasDecohered true } => { ?S :isObservable true } .

# === Observer Measurements ===

:alice :measures :state1 .
:bob :measures :state3 .
:carol :measures :state2 .
:dave :measures :state4 .

# === Estimate amplitudes ===

{ ?O :measures ?S . ?S :hasAmplitude ?A } => { ?O :estimatesAmplitude ?A } .

# === Observer Agreement / Disagreement ===

# Agreement only if both have decohered
{
  ?O1 :measures ?S1 .
  ?O2 :measures ?S2 .
  ?S1 :entangledWith ?S2 .
  ?O1 :estimatesAmplitude ?A .
  ?O2 :estimatesAmplitude ?A .
  ?S1 :hasDecohered true .
  ?S2 :hasDecohered true .
} => {
  ?O1 :agreesWith ?O2 .
} .

# Disagreement if amplitudes differ
{
  ?O1 :measures ?S1 .
  ?O2 :measures ?S2 .
  ?S1 :entangledWith ?S2 .
  ?O1 :estimatesAmplitude ?A1 .
  ?O2 :estimatesAmplitude ?A2 .
  ?A1 log:notEqualTo ?A2 .
} => {
  ?O1 :disagreesWith ?O2 .
} .

# Disagreement if amplitudes match but decoherence hasn't occurred
{
  ?O1 :measures ?S1 .
  ?O2 :measures ?S2 .
  ?S1 :entangledWith ?S2 .
  ?O1 :estimatesAmplitude ?A .
  ?O2 :estimatesAmplitude ?A .
  ?SCOPE log:notIncludes {
    ?S1 :hasDecohered true .
    ?S2 :hasDecohered true .
  } .
} => {
  ?O1 :disagreesWith ?O2 .
} .

# === Evolution of States ===

# A quantum state can evolve into another state
:state1 :evolvesInto :state5 .
:state2 :evolvesInto :state6 .

# Evolved states inherit amplitude (simplified)
{
  ?S1 :evolvesInto ?S2 .
  ?S1 :hasAmplitude ?A .
} => {
  ?S2 :hasAmplitude ?A .
  ?S2 a :QuantumState .
} .

# Inherit pointer-ness
{ ?S1 :evolvesInto ?S2 . ?S1 :isPointerState true } => { ?S2 :isPointerState true } .

# Evolved entanglement
{ ?S1 :evolvesInto ?S2 . ?S1 :entangledWith ?S3 } => { ?S2 :entangledWith ?S3 } .

# Selection: environment prefers pointer states
{ ?S a :QuantumState ; :isPointerState true } => { ?S :selectedByEnvironment true } .

# Filter: suppress non-pointer states (optional)
{ ?S a :QuantumState ; :isPointerState false } => { ?S :selectedByEnvironment false } .

