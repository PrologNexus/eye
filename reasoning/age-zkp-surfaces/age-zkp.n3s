@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix crypto: <http://www.w3.org/2000/10/swap/crypto#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <https://example.org/#>.

# components
:zeroKnowledgeProof a log:Component.
:challengeProof a log:Component.

# private person data
:Mary :birthDay "2000-01-01"^^xsd:date.
:Pat :birthDay "1970-01-01"^^xsd:date.
:John :birthDay "1960-01-01"^^xsd:date.

# simulation date
:simulation1 :date "2025-01-11T00:00:00.0Z"^^xsd:dateTime.

# simulation age
:simulation1 :age "P50Y"^^xsd:duration.

# prover demonstrates that persons are above some duration using a hash
(   _:Name
    _:Result
    _:Hash
    _:BirthDay
    _:Date
    _:Age
    _:Diff
    _:Str
    _:Context
) log:onNegativeSurface {
    () log:onNegativeSurface {
        :simulation1 :zeroKnowledgeProof (_:Name _:Result _:Hash).
    }.
    _:Name :birthDay _:BirthDay.
    :simulation1 :date _:Date.
    :simulation1 :age _:Age.
    (_:Date _:BirthDay) math:difference _:Diff.
    (_:Diff " " math:greaterThan " " _:Age) string:concatenation _:Str.
    _:Str crypto:sha256 _:Hash.
    (
        { _:Diff math:greaterThan _:Age }
        { _:Result log:equalTo ("proof verified: " _:Name " is more than 50 years old and entitled to work 80% per week")!string:concatenation }
        { _:Result log:equalTo ("proof failed: " _:Name " is less than 50 years and not entitled to work 80% per week")!string:concatenation }
    ) log:ifThenElseIn (_:Context -1).
}.

# Challenger checking the proof using the hash
(   _:Name
    _:Result
    _:Hash
    _:BirthDay
    _:Date
    _:Age
    _:Diff
    _:Str
    _:ProofHash
    _:Context
) log:onNegativeSurface {
    () log:onNegativeSurface {
        :simulation1 :challengeProof (_:Name _:Result _:Hash).
    }.
    _:Name :birthDay _:BirthDay.
    :simulation1 :date _:Date.
    :simulation1 :age _:Age.
    (_:Date _:BirthDay) math:difference _:Diff.
    (_:Diff " " math:greaterThan " " _:Age) string:concatenation _:Str.
    _:Str crypto:sha256 _:ProofHash.
    (
        { _:Hash log:equalTo _:ProofHash }
        { _:Result log:equalTo ("challenge successful: the proof is valid")!string:concatenation }
        { _:Result log:equalTo ("Challenge failed: the proof is invalid")!string:concatenation }
    ) log:ifThenElseIn (_:Context -1).
}.

# queries
(   _:S
    _:Result
    _:Hash
) log:onNegativeSurface {
    _:S :zeroKnowledgeProof (:Mary _:Result _:Hash).
    () log:onNegativeAnswerSurface {
        _:S :zeroKnowledgeProof (:Mary _:Result _:Hash).
    }.
}.

(   _:S
    _:Result
    _:Hash
) log:onNegativeSurface {
    _:S :zeroKnowledgeProof (:Pat _:Result _:Hash).
    () log:onNegativeAnswerSurface {
        _:S :zeroKnowledgeProof (:Pat _:Result _:Hash).
    }.
}.

(   _:S
    _:Result
) log:onNegativeSurface {
    _:S :challengeProof (:Mary _:Result "adf23913cd97b2d831b54cf9109c111d205d8dfd777413235bdb1c7c91cf4007").
    () log:onNegativeAnswerSurface {
        _:S :challengeProof (:Mary _:Result "adf23913cd97b2d831b54cf9109c111d205d8dfd777413235bdb1c7c91cf4007").
    }.
}.

(   _:S
    _:Result
) log:onNegativeSurface {
    _:S :challengeProof (:Pat _:Result "f27ef05269ce8786795b9aa75aa55c398808deb88b037a41913351ff3ab66c0c").
    () log:onNegativeAnswerSurface {
        _:S :challengeProof (:Pat _:Result "f27ef05269ce8786795b9aa75aa55c398808deb88b037a41913351ff3ab66c0c").
    }.
}.
