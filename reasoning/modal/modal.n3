@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <urn:example:>.

# possible worlds
:w1 a :PossibleWorld.
:w2 a :PossibleWorld.
:w3 a :PossibleWorld.

# propositions
:p a :Proposition.
:q a :Proposition.

# accessibility relations between worlds
:w1 :hasAccessTo :w2.
:w1 :hasAccessTo :w3.
:w2 :hasAccessTo :w3.

# propositions are true in possible worlds
:p :isTrueIn :w1.
:p :isTrueIn :w2.
:q :isTrueIn :w2.
:p :isTrueIn :w3.

# accessibility is reflexive
{
    ?World a :PossibleWorld.
} => {
    ?World :hasAccessTo ?World.
}.

# accessibility is transitive
{
    ?World1 :hasAccessTo ?World2.
    ?World2 :hasAccessTo ?World3.
} => {
    ?World1 :hasAccessTo ?World3.
}.

# necessity operator □P
{ ?P :isNecessityIn ?World } <= {
    ?World a :PossibleWorld.
    ?P a :Proposition.
    (   1
        {   ?World :hasAccessTo ?AccessibleWorld.
            ?P :isTrueIn ?AccessibleWorld.
        }
        ?List
    ) log:collectAllIn ?Scope.
    (   1
        {   ?World :hasAccessTo ?AccessibleWorld.
        }
        ?List
    ) log:collectAllIn ?Scope.
}.

# possibility operator ◇P
{ ?P :isPossibilityIn ?World } <= {
    ?World a :PossibleWorld.
    ?P a :Proposition.
    ?World :hasAccessTo ?AccessibleWorld.
    ?P :isTrueIn ?AccessibleWorld.
}.

# a formula □◇P is true if ◇P is true in every accessible world
{ { ?P :isPossibilityIn ?World1 } :isNecessityIn ?World2 } <= {
    ?World1 a :PossibleWorld.
    ?World2 a :PossibleWorld.
    ?P a :Proposition.
    (   1
        {   ?World2 :hasAccessTo ?AccessibleWorld.
            ?P :isPossibilityIn ?AccessibleWorld.
        }
        ?List
    ) log:collectAllIn ?Scope.
    (   1
        {   ?World2 :hasAccessTo ?AccessibleWorld.
        }
        ?List
    ) log:collectAllIn ?Scope.
}.

# query
{
    ?P :isNecessityIn ?World.
} =^ {
    ?P :isNecessityIn ?World.
}.

{
    ?P :isPossibilityIn ?World.
} =^ {
    ?P :isPossibilityIn ?World.
}.
