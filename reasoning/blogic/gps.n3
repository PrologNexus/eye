# Goal driven Parallel Sequences -- Jos De Roo

# Inspired by https://www.cs.cmu.edu/~fp/courses/15816-s12/lectures/01-inference.pdf

# "In linear logic we are instead concerned with the change of truth with a
# change of state. We model this in a very simple way: when an inference rule
# is applied we consume the propositions used as premises and produce the
# propositions in the conclusions, thereby effecting an overall change in state."

@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix gps: <http://eyereasoner.github.io/eye/reasoning/gps/gps-schema#>.
@prefix : <http://eyereasoner.github.io/eye/reasoning#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/d7882a29-44b8-4cbc-bc70-3bd11fba1fdb#>.

# find paths in the state space from initial state to goal state within limits
(skolem:SCOPE skolem:Goal skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:SCOPE gps:findpath (skolem:Goal skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort
            (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort))>>.
    skolem:SCOPE gps:findpaths (() skolem:Goal () 0.0 0.0 1.0 1.0 skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort
        (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort 1)).
}.

(skolem:SCOPE skolem:Goal skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:SCOPE gps:findpath (skolem:Goal skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount))>>.
    skolem:SCOPE gps:findpaths (() skolem:Goal () 0.0 0.0 1.0 1.0 skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort
        (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount)).
}.

(skolem:SCOPE skolem:Maps skolem:Goal skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:SCOPE gps:findpaths (skolem:Maps skolem:Goal skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort
            (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount))>>.
    skolem:Goal log:callWithCleanup true.
}.

(skolem:SCOPE skolem:Maps_s skolem:Goal skolem:Path_s skolem:Duration_s skolem:Cost_s skolem:Belief_s skolem:Comfort_s skolem:Path
 skolem:Duration skolem:Cost skolem:Belief skolem:Comfort skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount
 skolem:From skolem:Transition skolem:To skolem:Action skolem:Duration_n skolem:Cost_n skolem:Belief_n skolem:Comfort_n skolem:Map skolem:Maps_t skolem:Stagecount
 skolem:Duration_t skolem:Cost_t skolem:Belief_t skolem:Comfort_t skolem:Path_t) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:SCOPE gps:findpaths (skolem:Maps_s skolem:Goal skolem:Path_s skolem:Duration_s skolem:Cost_s skolem:Belief_s skolem:Comfort_s skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort
            (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount))>>.
    skolem:Map gps:description (skolem:From skolem:Transition skolem:To skolem:Action skolem:Duration_n skolem:Cost_n skolem:Belief_n skolem:Comfort_n).
    (skolem:Maps_s (skolem:Map)) list:append skolem:Maps_t.
    skolem:Maps_t gps:stagecount skolem:Stagecount.
    skolem:Stagecount math:notGreaterThan skolem:MaxStagecount.
    (skolem:Duration_s skolem:Duration_n) math:sum skolem:Duration_t.
    skolem:Duration_t math:notGreaterThan skolem:MaxDuration.
    (skolem:Cost_s skolem:Cost_n) math:sum skolem:Cost_t.
    skolem:Cost_t math:notGreaterThan skolem:MaxCost.
    (skolem:Belief_s skolem:Belief_n) math:product skolem:Belief_t.
    skolem:Belief_t math:notLessThan skolem:MinBelief.
    (skolem:Comfort_s skolem:Comfort_n) math:product skolem:Comfort_t.
    skolem:Comfort_t math:notLessThan skolem:MinComfort.
    (skolem:Path_s (skolem:Action)) list:append skolem:Path_t.
    skolem:From log:becomes skolem:To.
    {skolem:SCOPE gps:findpaths (skolem:Maps_t skolem:Goal skolem:Path_t skolem:Duration_t skolem:Cost_t skolem:Belief_t skolem:Comfort_t skolem:Path skolem:Duration skolem:Cost skolem:Belief skolem:Comfort
        (skolem:MaxDuration skolem:MaxCost skolem:MinBelief skolem:MinComfort skolem:MaxStagecount))} log:callWithCleanup {skolem:To log:becomes skolem:From}.
}.

# counting the number of stages (a stage is a sequence of steps in the same map)
() log:onNegativeSurface {
    () log:onNegativeSurface <<() gps:stagecount 1>>.
}.

(skolem:A skolem:B skolem:C skolem:D skolem:E skolem:F skolem:G) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:A gps:stagecount skolem:B>>.
    skolem:A list:firstRest (skolem:C skolem:D).
    skolem:D list:firstRest (skolem:E skolem:F).
    skolem:C log:notEqualTo skolem:E.
    skolem:D gps:stagecount skolem:G.
    (skolem:G 1) math:sum skolem:B.
}.

(skolem:A skolem:B skolem:C skolem:D) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:A gps:stagecount skolem:B>>.
    skolem:A list:firstRest (skolem:C skolem:D).
    skolem:D gps:stagecount skolem:B.
}.

# current state
:i1 :location :Gent.

# map of Belgium
(skolem:S skolem:L) log:onNegativeSurface {
    () log:onNegativeSurface <<:map-BE gps:description ({skolem:S :location :Gent} true {skolem:S :location :Brugge} :drive_gent_brugge 1500.0 0.006 0.96 0.99)>>.
    skolem:S :location skolem:L.
}.

(skolem:S skolem:L) log:onNegativeSurface {
    () log:onNegativeSurface <<:map-BE gps:description ({skolem:S :location :Gent} true {skolem:S :location :Kortrijk} :drive_gent_kortrijk 1600.0 0.007 0.96 0.99)>>.
    skolem:S :location skolem:L.
}.

(skolem:S skolem:L) log:onNegativeSurface {
    () log:onNegativeSurface <<:map-BE gps:description ({skolem:S :location :Kortrijk} true {skolem:S :location :Brugge} :drive_kortrijk_brugge 1600.0 0.007 0.96 0.99)>>.
    skolem:S :location skolem:L.
}.

(skolem:S skolem:L) log:onNegativeSurface {
    () log:onNegativeSurface <<:map-BE gps:description ({skolem:S :location :Brugge} true {skolem:S :location :Oostende} :drive_brugge_oostende 900.0 0.004 0.98 1.0)>>.
    skolem:S :location skolem:L.
}.

# path to goal state
(skolem:SCOPE skolem:SUBJECT skolem:PATH skolem:DURATION skolem:COST skolem:BELIEF skolem:COMFORT) log:onNegativeSurface {
    skolem:SCOPE gps:findpath ({skolem:SUBJECT :location :Oostende} skolem:PATH skolem:DURATION skolem:COST skolem:BELIEF skolem:COMFORT (5000.0 5.0 0.2 0.4 1)).
    () log:onNegativeSurface {
        skolem:SUBJECT gps:path (skolem:PATH skolem:DURATION skolem:COST skolem:BELIEF skolem:COMFORT).
    }.
}.

# query
(skolem:SUBJECT skolem:PATH skolem:DURATION skolem:COST skolem:BELIEF skolem:COMFORT) log:onQuerySurface {
    skolem:SUBJECT gps:path (skolem:PATH skolem:DURATION skolem:COST skolem:BELIEF skolem:COMFORT).
}.
