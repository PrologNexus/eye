@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix : <http://example.org/ns#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/d7882a29-44b8-4cbc-bc70-3bd11fba1fdb#>.

# sample data from RubenD
[] :data {
    [] :package {
        [] :content {
            :a :b _:c.
            [] :package {
                [] :content {
                    :u :v _:c.
                    [] :package {
                        [] :content {
                            :x :y _:c.
                        }; :usable_until :yesterday.
                    }; :tag :invalid.
                }; :usable_until :tomorrow; :p :o.
            }; :tag :valid.
        }; :usable_until :next_week.
    }; :tag :valid.
}.

# unpack the triples that are usable in the future
(skolem:b skolem:g skolem:l skolem:m skolem:h) log:onNegativeSurface {
    skolem:b :data skolem:g.
    skolem:g graph:list skolem:l.
    skolem:l :unpack skolem:m.
    skolem:m graph:union skolem:h.
    () log:onAnswerSurface skolem:h.
}.

# the logic for unpack using backward rules
() log:onNegativeSurface {
    () log:onNegativeSurface <<() :unpack ()>>.
}.

(skolem:g skolem:h skolem:f skolem:r skolem:a skolem:b) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:g :unpack skolem:h>>.
    skolem:g list:firstRest (skolem:f skolem:r).
    skolem:h list:firstRest (skolem:a skolem:b).
    skolem:f :unpack skolem:a.
    skolem:r :unpack skolem:b.
}.

(skolem:b skolem:p skolem:f skolem:a skolem:c skolem:t skolem:l skolem:m) log:onNegativeSurface {
    () log:onNegativeSurface <<{
        skolem:b :package skolem:p.
    } :unpack skolem:f>>.
    skolem:p log:includes {
        skolem:a :content skolem:c; :usable_until skolem:t.
    }.
    (:tomorrow :next_week) list:member skolem:t.
    skolem:c graph:list skolem:l.
    skolem:l :unpack skolem:m.
    skolem:m graph:union skolem:f.
}.

(skolem:b skolem:p skolem:a skolem:c skolem:t skolem:l skolem:m) log:onNegativeSurface {
    () log:onNegativeSurface <<{
        skolem:b :package skolem:p.
    } :unpack true>>.
    skolem:p log:includes {
        skolem:a :content skolem:c; :usable_until skolem:t.
    }.
    (:yesterday :last_week) list:member skolem:t.
}.

(skolem:b skolem:p) log:onNegativeSurface {
    () log:onNegativeSurface <<{
        skolem:b :tag skolem:p.
    } :unpack true>>.
}.

(skolem:g skolem:r skolem:a skolem:p skolem:b skolem:q) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:g :unpack skolem:g>>.
    skolem:g log:rawType skolem:r.
    skolem:r log:notEqualTo rdf:List.
    skolem:g log:notIncludes {
        skolem:a :package skolem:p.
    }.
    skolem:g log:notIncludes {
        skolem:b :tag skolem:q.
    }.
}.
