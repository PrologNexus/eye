# Superdense coding using discrete quantum computing

# See https://arxiv.org/pdf/1101.3764.pdf and https://arxiv.org/pdf/1010.2929.pdf

# Discrete quantum theory is obtained by instantiating the mathematical framework
# of Hilbert spaces with a finite field instead of the field of complex numbers.
# This instantiation collapses much the structure of actual quantum mechanics but
# retains several of its distinguishing characteristics including the notions of
# superposition, interference, and entanglement. Furthermore, discrete quantum
# theory excludes local hidden variable models, has a no-cloning theorem, and can
# express natural counterparts of quantum information protocols such as superdense
# coding and teleportation.

# Surprisingly discrete quantum computing is identical to conventional logic
# programming except for a small twist that is responsible for all the
# "quantum-ness". The twist occurs when merging sets of answers computed by
# several alternatives: the answers are combined using an exclusive version of
# logical disjunction. In other words, the two branches of a choice junction
# exhibit an interference effect: an answer is produced from the junction if it
# occurs in one or the other branch but not both.

@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix dqc: <http://eyereasoner.github.io/eye/reasoning/dqc#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/d7882a29-44b8-4cbc-bc70-3bd11fba1fdb#>.

# |R) = |0, 0) + |1, 1)
false dqc:r false.
true dqc:r true.

# |S) = |0, 1) + |1, 0)
false dqc:s true.
true dqc:s false.

# |U) = |0, 0) + |1, 0) + |1, 1)
false dqc:u false.
true dqc:u false.
true dqc:u true.

# |V ) = |0, 0) + |0, 1) + |1, 0)
false dqc:v false.
false dqc:v true.
true dqc:v false.

# 1 |0) = |0)
false dqc:id false.
# 1 |1) = |1)
true dqc:id true.

# G |0) = |1)
false dqc:g true.
# G |1) = |0)
true dqc:g false.

# K |0) = |0)
false dqc:k false.
# K |1) = |0) + |1)
true dqc:k false.
true dqc:k true.

# KG
(skolem:X skolem:Y skolem:Z) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:X dqc:kg skolem:Y>>.
    skolem:X dqc:g skolem:Z.
    skolem:Z dqc:k skolem:Y.
}.

# GK
(skolem:X skolem:Y skolem:Z) log:onNegativeSurface {
    () log:onNegativeSurface <<skolem:X dqc:gk skolem:Y>>.
    skolem:X dqc:k skolem:Z.
    skolem:Z dqc:g skolem:Y.
}.

# Alice
(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<0 dqc:alice (skolem:X skolem:Y)>>.
    skolem:X dqc:id skolem:Y.
}.

(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<1 dqc:alice (skolem:X skolem:Y)>>.
    skolem:X dqc:g skolem:Y.
}.

(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<2 dqc:alice (skolem:X skolem:Y)>>.
    skolem:X dqc:k skolem:Y.
}.

(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<3 dqc:alice (skolem:X skolem:Y)>>.
    skolem:X dqc:kg skolem:Y.
}.

# Bob
(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:X skolem:Y) dqc:bob 0>>.
    skolem:X dqc:gk skolem:Y.
}.

(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:X skolem:Y) dqc:bob 1>>.
    skolem:X dqc:k skolem:Y.
}.

(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:X skolem:Y) dqc:bob 2>>.
    skolem:X dqc:g skolem:Y.
}.

(skolem:X skolem:Y) log:onNegativeSurface {
    () log:onNegativeSurface <<(skolem:X skolem:Y) dqc:bob 3>>.
    skolem:X dqc:id skolem:Y.
}.

# superdense coding
(skolem:N skolem:A skolem:B skolem:M skolem:X skolem:Y skolem:Z skolem:L skolem:S skolem:I) log:onNegativeSurface {
    skolem:N dqc:alice skolem:A.
    skolem:B dqc:bob skolem:M.
    (1 {skolem:X dqc:r skolem:Y. skolem:N dqc:alice (skolem:X skolem:Z). (skolem:Z skolem:Y) dqc:bob skolem:M} skolem:L) log:collectAllIn skolem:S.
    skolem:L list:length skolem:I.
    (skolem:I 2) math:remainder 1.
    () log:onNegativeSurface {
        skolem:N dqc:sdcoding skolem:M.
    }.
}.

# query
(skolem:N skolem:M) log:onQuerySurface {
    skolem:N dqc:sdcoding skolem:M.
}.

