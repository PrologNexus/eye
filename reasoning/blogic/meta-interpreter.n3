# ----------------
# Meta-interpreter
# ----------------
#
# Inspired by https://www.metalevel.at/acomip/

@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix : <https://eyereasoner.github.io/eye/ns#> .

() log:onNegativeSurface {
    () log:onNegativeSurface <<() :mi ()>> .
} .

(_A _G _Gs _Goals) log:onNegativeSurface {
    () log:onNegativeSurface <<() :mi _A>> .
    _A list:firstRest (_G _Gs) .
    () :headBody (_G _Goals _Gs) .
    () :mi _Goals .
} .

(_Rs) log:onNegativeSurface {
    () log:onNegativeSurface <<() :headBody ({() :mi ()} _Rs _Rs)>> .
} .

(_A _B _Rs _G _Gs _Goals _C) log:onNegativeSurface {
    () log:onNegativeSurface <<() :headBody ({() :mi _A} _B _Rs)>> .
    _A list:firstRest (_G _Gs) .
    _B list:firstRest ({() :headBody (_G _Goals _Gs)} _C) .
    _C list:firstRest ({() :mi _Goals} _Rs) .
} .

(_Head _Goals0 _Goals _Rs) log:onNegativeSurface {
    () log:onNegativeSurface <<() :headBody ({() :headBody (_Head _Goals0 _Goals)} _Rs _Rs)>> .
    () :headBody (_Head _Goals0 _Goals) .
} .

(_Rs) log:onNegativeSurface {
    () log:onNegativeSurface <<() :headBody ({() :natnum (0)} _Rs _Rs)>> .
} .

(_X _A _Rs) log:onNegativeSurface {
    () log:onNegativeSurface <<() :headBody ({() :natnum (:s _X)} _A _Rs)>> .
    _A list:firstRest ({() :natnum _X} _Rs) .
} .

# question
() log:onQuestionSurface {
    () :mi ({() :mi ({() :mi ({() :natnum (:s (:s (:s (:s (:s (0))))))})})}) .
    () log:onAnswerSurface {
        :test :is true .
    } .
} .
