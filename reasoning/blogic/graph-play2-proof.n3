@prefix : <urn:example:>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://eyereasoner.github.io/var#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:component skolem:lemma2;
    r:component skolem:lemma3;
    r:component skolem:lemma4;
    r:component skolem:lemma5;
    r:component skolem:lemma6;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
        (skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
        (skolem:e_S1_1_1 skolem:e_a_1_1) log:nand {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }.
        (skolem:e_S1_1_2 skolem:e_x_1_1 skolem:e_y_1_1) log:nand {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }.
        () log:nand {
            _:sk_24 a <urn:example:C>.
        }.
        () log:onNeutralSurface {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }.
        () log:onNeutralSurface {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }.
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
        (skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
    };
    r:evidence (
        skolem:lemma7
        [ a r:Fact; r:gives {(skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo (skolem:e_E_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        } => {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        }.
    }].

skolem:lemma2 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
        (skolem:e_S1_1_1 skolem:e_a_1_1) log:nand {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }.
    };
    r:evidence (
        skolem:lemma7
        [ a r:Fact; r:gives {(skolem:e_S1_1_1 skolem:e_a_1_1) log:nand {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo (skolem:e_S1_1_1 skolem:e_a_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
        () log:nand {
            () log:onNeutralSurface skolem:e_S1_1_1.
        }.
    }];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        } => {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        }.
    }].

skolem:lemma3 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
        (skolem:e_S1_1_2 skolem:e_x_1_1 skolem:e_y_1_1) log:nand {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }.
    };
    r:evidence (
        skolem:lemma7
        [ a r:Fact; r:gives {(skolem:e_S1_1_2 skolem:e_x_1_1 skolem:e_y_1_1) log:nand {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo (skolem:e_S1_1_2 skolem:e_x_1_1 skolem:e_y_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        () log:onNeutralSurface skolem:e_S1_1_2.
        skolem:e_x_1_1 log:nand skolem:e_y_1_1.
        () log:output {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
        }.
    }];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        } => {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        }.
    }].

skolem:lemma4 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
        () log:nand {
            _:sk_24 a <urn:example:C>.
        }.
    };
    r:evidence (
        skolem:lemma7
        [ a r:Fact; r:gives {() log:nand {
            _:sk_24 a <urn:example:C>.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo ()];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        _:sk_24 a <urn:example:C>.
    }];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        } => {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        }.
    }].

skolem:lemma5 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }.
        (skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
    };
    r:evidence (
        skolem:lemma8
        [ a r:Fact; r:gives {(skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
        () log:nand {
            () log:onNeutralSurface skolem:e_S1_1_1.
        }.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo (skolem:e_E_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        } => {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        }.
    }].

skolem:lemma6 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }.
        (skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
    };
    r:evidence (
        skolem:lemma9
        [ a r:Fact; r:gives {(skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        () log:onNeutralSurface skolem:e_S1_1_2.
        skolem:e_x_1_1 log:nand skolem:e_y_1_1.
        () log:output {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
        }.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo (skolem:e_E_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        } => {
            () log:onNeutralSurface var:x_0.
            var:x_1 log:nand var:x_2.
        }.
    }].

skolem:lemma7 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_E_1_1 a <urn:example:C>.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {(skolem:e_E_1_1) log:nand {
            skolem:e_E_1_1 a <urn:example:C>.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo (skolem:e_E_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo {
        skolem:e_E_1_1 a <urn:example:C>.
    }];
    r:rule [ a r:DerivedRule; r:gives {
        {
            var:x_0 log:nand var:x_1.
        } => {
            () log:onNeutralSurface var:x_1.
        }.
    }].

skolem:lemma8 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {(skolem:e_S1_1_1 skolem:e_a_1_1) log:nand {
            skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
            () log:nand {
                () log:onNeutralSurface skolem:e_S1_1_1.
            }.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo (skolem:e_S1_1_1 skolem:e_a_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo {
        skolem:e_a_1_1 log:nand skolem:e_S1_1_1.
        () log:nand {
            () log:onNeutralSurface skolem:e_S1_1_1.
        }.
    }];
    r:rule [ a r:DerivedRule; r:gives {
        {
            var:x_0 log:nand var:x_1.
        } => {
            () log:onNeutralSurface var:x_1.
        }.
    }].

skolem:lemma9 a r:Inference;
    r:gives {
        () log:onNeutralSurface {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {(skolem:e_S1_1_2 skolem:e_x_1_1 skolem:e_y_1_1) log:nand {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            () log:output {
                () log:onNeutralSurface skolem:e_S1_1_2.
                skolem:e_x_1_1 log:nand skolem:e_y_1_1.
            }.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo (skolem:e_S1_1_2 skolem:e_x_1_1 skolem:e_y_1_1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo {
        () log:onNeutralSurface skolem:e_S1_1_2.
        skolem:e_x_1_1 log:nand skolem:e_y_1_1.
        () log:output {
            () log:onNeutralSurface skolem:e_S1_1_2.
            skolem:e_x_1_1 log:nand skolem:e_y_1_1.
        }.
    }];
    r:rule [ a r:DerivedRule; r:gives {
        {
            var:x_0 log:nand var:x_1.
        } => {
            () log:onNeutralSurface var:x_1.
        }.
    }].

