@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <http://example.org/ns#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://eyereasoner.github.io/var#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/3917894951695475063#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:gives {
        :xxx a :aaa.
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        :xxx a :aaa.
    };
    r:evidence (
        skolem:lemma2
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://example.org/ns#xxx"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://example.org/ns#aaa"]];
    r:rule [ a r:DerivedQuery; r:gives {
        {
            var:x_0 a var:x_1.
        } => {
            var:x_0 a var:x_1.
        }.
    }].

skolem:lemma2 a r:Inference;
    r:gives {
        :xxx a :aaa.
    };
    r:evidence (
        skolem:lemma3
        skolem:lemma4
        [ a r:Fact; r:gives {(skolem:e_y_1_1) log:onNegativeSurface {
            :xxx :bbb skolem:e_y_1_1.
            () log:onNegativeSurface {
                skolem:e_y_1_1 a :ccc.
            }.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://example.org/ns#aaa"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://example.org/ns#bbb"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://example.org/ns#ccc"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "http://eyereasoner.github.io/.well-known/genid/3917894951695475063#e_y_1_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://example.org/ns#xxx"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            var:x_0 owl:onProperty var:x_1.
            var:x_0 owl:allValuesFrom var:x_2.
            (var:x_3) log:onNegativeSurface {
                var:x_4 var:x_1 var:x_3.
                () log:onNegativeSurface {
                    var:x_3 a var:x_2.
                }.
            }.
        } => {
            var:x_4 a var:x_0.
        }.
    }].

skolem:lemma3 a r:Extraction;
    r:gives {
        :aaa owl:onProperty :bbb.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/blogic/slide33.n3s>].

skolem:lemma4 a r:Extraction;
    r:gives {
        :aaa owl:allValuesFrom :ccc.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/blogic/slide33.n3s>].

