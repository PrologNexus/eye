@prefix : <urn:example:>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://eyereasoner.github.io/var#>.
@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:gives {
        <urn:example:test> <urn:example:is> true.
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        <urn:example:test> <urn:example:is> true.
    };
    r:evidence (
        skolem:lemma2
    );
    r:rule [ a r:DerivedQuery; r:gives {
        {
            <urn:example:test> <urn:example:is> true.
        } => {
            <urn:example:test> <urn:example:is> true.
        }.
    }].

skolem:lemma2 a r:Inference;
    r:gives {
        <urn:example:test> <urn:example:is> true.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (_:sk_4) log:onNeutralSurface {
                _:sk_4 a <urn:example:C>.
            }.
        } log:equalTo {
            (_:sk_4) log:onNeutralSurface {
                _:sk_4 a <urn:example:C>.
            }.
        }}]
        [ a r:Fact; r:gives {{
            (_:sk_4) log:onNeutralSurface {
                _:sk_4 a <urn:example:C>.
            }.
        } log:equalTo {
            (_:sk_4) log:onNeutralSurface {
                _:sk_4 a <urn:example:C>.
            }.
        }}]
        [ a r:Fact; r:gives {{
            (_:sk_4) log:onNeutralSurface {
                _:sk_4 a <urn:example:C>.
            }.
        } log:equalTo {
            (_:sk_4) log:onNeutralSurface {
                _:sk_4 a <urn:example:C>.
            }.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (_:sk_4) log:onNeutralSurface {
            _:sk_4 a <urn:example:C>.
        }.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo {
        (_:sk_4) log:onNeutralSurface {
            _:sk_4 a <urn:example:C>.
        }.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            var:x_0 log:equalTo {
                (var:x_1) log:onNeutralSurface {
                    var:x_1 a <urn:example:C>.
                }.
            }.
            var:x_2 log:equalTo {
                (var:x_3) log:onNeutralSurface {
                    var:x_3 a <urn:example:C>.
                }.
            }.
            var:x_0 log:equalTo var:x_2.
        } => {
            <urn:example:test> <urn:example:is> true.
        }.
    }].

