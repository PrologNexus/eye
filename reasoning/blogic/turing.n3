# ------------------------
# Universal Turing machine
# ------------------------
#
# See https://en.wikipedia.org/wiki/Universal_Turing_machine

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix : <http://example.org/ns#>.

# interpreter for Univeral Turing Machine
(_OutTape _Machine _I) log:onNegativeSurface {
    () log:onNegativeSurface <<() :compute _OutTape>>.
    _Machine :start _I.
    (_I () "#" ()) :find _OutTape.
}.

(_List _OutTape _Head _Tail _Machine _I) log:onNegativeSurface {
    () log:onNegativeSurface <<_List :compute _OutTape>>.
    _List list:firstRest (_Head _Tail).
    _Machine :start _I.
    (_I () _Head _Tail) :find _OutTape.
}.

(_State _Left _Cell _Right _OutTape _Write _Move _Next _A _B _C) log:onNegativeSurface {
    () log:onNegativeSurface <<(_State _Left _Cell _Right) :find _OutTape>>.
    (_State _Cell _Write _Move) :tape _Next.
    (_Move _Left _Write _Right _A _B _C) :move true.
    (_Next _A _B _C) :continue _OutTape.
}.

(_Left _Cell _Right _OutTape _R _List) log:onNegativeSurface {
    () log:onNegativeSurface <<(:halt _Left _Cell _Right) :continue _OutTape>>.
    _Left :reverse _R.
    _List list:firstRest (_Cell _Right).
    (_R _List) list:append _OutTape.
}.

(_State _Left _Cell _Right _OutTape) log:onNegativeSurface {
    () log:onNegativeSurface <<(_State _Left _Cell _Right) :continue _OutTape>>.
    (_State _Left _Cell _Right) :find _OutTape.
}.

(_Cell _Right _L) log:onNegativeSurface {
    () log:onNegativeSurface <<(:left () _Cell _Right () "#" _L) :move true>>.
    _L list:firstRest (_Cell _Right).
}.

(_List _Cell _Right _Tail _Head _L) log:onNegativeSurface {
    () log:onNegativeSurface <<(:left _List _Cell _Right _Tail _Head _L) :move true>>.
    _List list:firstRest (_Head _Tail).
    _L list:firstRest (_Cell _Right).
}.

(_Left _Cell _Right) log:onNegativeSurface {
    () log:onNegativeSurface <<(:stop _Left _Cell _Right _Left _Cell _Right) :move true>>.
}.

(_Left _Cell _L) log:onNegativeSurface {
    () log:onNegativeSurface <<(:right _Left _Cell () _L "#" ()) :move true>>.
    _L list:firstRest (_Cell _Left).
}.

(_Left _Cell _List _L _Head _Tail) log:onNegativeSurface {
    () log:onNegativeSurface <<(:right _Left _Cell _List _L _Head _Tail) :move true>>.
    _List list:firstRest (_Head _Tail).
    _L list:firstRest (_Cell _Left).
}.

() log:onNegativeSurface {
    () log:onNegativeSurface <<() :reverse ()>>.
}.

(_List _Reverse _Head _Tail _R) log:onNegativeSurface {
    () log:onNegativeSurface <<_List :reverse _Reverse>>.
    _List list:firstRest (_Head _Tail).
    _Tail :reverse _R.
    (_R (_Head)) list:append _Reverse.
}.

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
(_A) log:onQuerySurface {
    (1 0 1 0 0 1) :compute _A.
}.

(_A) log:onQuerySurface {
    (1 0 1 1 1 1) :compute _A.
}.

(_A) log:onQuerySurface {
    (1 1 1 1 1 1) :compute _A.
}.

(_A) log:onQuerySurface {
    () :compute _A.
}.
