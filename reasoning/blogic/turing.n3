# ------------------------
# Universal Turing machine
# ------------------------
#
# See https://en.wikipedia.org/wiki/Universal_Turing_machine

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix : <http://example.org/ns#>.

# interpreter for Univeral Turing Machine
(?OutTape ?Machine ?I) log:onNegativeSurface {
    () log:onNegativeSurface <<() :compute ?OutTape>>.
    ?Machine :start ?I.
    (?I () "#" ()) :find ?OutTape.
}.

(?List ?OutTape ?Head ?Tail ?Machine ?I) log:onNegativeSurface {
    () log:onNegativeSurface <<?List :compute ?OutTape>>.
    ?List list:firstRest (?Head ?Tail).
    ?Machine :start ?I.
    (?I () ?Head ?Tail) :find ?OutTape.
}.

(?State ?Left ?Cell ?Right ?OutTape ?Write ?Move ?Next ?A ?B ?C) log:onNegativeSurface {
    () log:onNegativeSurface <<(?State ?Left ?Cell ?Right) :find ?OutTape>>.
    (?State ?Cell ?Write ?Move) :tape ?Next.
    (?Move ?Left ?Write ?Right ?A ?B ?C) :move true.
    (?Next ?A ?B ?C) :continue ?OutTape.
}.

(?Left ?Cell ?Right ?OutTape ?R ?List) log:onNegativeSurface {
    () log:onNegativeSurface <<(:halt ?Left ?Cell ?Right) :continue ?OutTape>>.
    ?Left :reverse ?R.
    ?List list:firstRest (?Cell ?Right).
    (?R ?List) list:append ?OutTape.
}.

(?State ?Left ?Cell ?Right ?OutTape) log:onNegativeSurface {
    () log:onNegativeSurface <<(?State ?Left ?Cell ?Right) :continue ?OutTape>>.
    (?State ?Left ?Cell ?Right) :find ?OutTape.
}.

(?Cell ?Right ?L) log:onNegativeSurface {
    () log:onNegativeSurface <<(:left () ?Cell ?Right () "#" ?L) :move true>>.
    ?L list:firstRest (?Cell ?Right).
}.

(?List ?Cell ?Right ?Tail ?Head ?L) log:onNegativeSurface {
    () log:onNegativeSurface <<(:left ?List ?Cell ?Right ?Tail ?Head ?L) :move true>>.
    ?List list:firstRest (?Head ?Tail).
    ?L list:firstRest (?Cell ?Right).
}.

(?Left ?Cell ?Right) log:onNegativeSurface {
    () log:onNegativeSurface <<(:stop ?Left ?Cell ?Right ?Left ?Cell ?Right) :move true>>.
}.

(?Left ?Cell ?L) log:onNegativeSurface {
    () log:onNegativeSurface <<(:right ?Left ?Cell () ?L "#" ()) :move true>>.
    ?L list:firstRest (?Cell ?Left).
}.

(?Left ?Cell ?List ?L ?Head ?Tail) log:onNegativeSurface {
    () log:onNegativeSurface <<(:right ?Left ?Cell ?List ?L ?Head ?Tail) :move true>>.
    ?List list:firstRest (?Head ?Tail).
    ?L list:firstRest (?Cell ?Left).
}.

() log:onNegativeSurface {
    () log:onNegativeSurface <<() :reverse ()>>.
}.

(?List ?Reverse ?Head ?Tail ?R) log:onNegativeSurface {
    () log:onNegativeSurface <<?List :reverse ?Reverse>>.
    ?List list:firstRest (?Head ?Tail).
    ?Tail :reverse ?R.
    (?R (?Head)) list:append ?Reverse.
}.

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
(?A) log:onQuerySurface {
    (1 0 1 0 0 1) :compute ?A.
}.

(?A) log:onQuerySurface {
    (1 0 1 1 1 1) :compute ?A.
}.

(?A) log:onQuerySurface {
    (1 1 1 1 1 1) :compute ?A.
}.

(?A) log:onQuerySurface {
    () :compute ?A.
}.
