@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix : <http://example.org/ns#>.

# sample data from RubenD
() log:onNeutralSurface {
    [] :package {
        [] :content {
            :a :b _:c.
            [] :package {
                [] :content {
                    :u :v _:c.
                    [] :package {
                        [] :content {
                            :x :y _:c.
                        }; :usable_until :yesterday.
                    }; :tag :invalid.
                }; :usable_until :tomorrow; :p :o.
            }; :tag :valid.
        }; :usable_until :next_week.
    }; :tag :valid.
}.

# unpack the triples that are usable in the future
(_:b _:g _:l _:m _:h) log:onNegativeSurface {
    _:b log:onNeutralSurface _:g.
    _:g graph:list _:l.
    _:l :unpack _:m.
    _:m graph:union _:h.
    () log:onAnswerSurface _:h.
}.

# the logic for unpack using backward rules
() log:onNegativeSurface {
    () log:onNegativeSurface <<() :unpack ()>>.
}.

(_:g _:h _:f _:r _:a _:b) log:onNegativeSurface {
    () log:onNegativeSurface <<_:g :unpack _:h>>.
    _:g list:firstRest (_:f _:r).
    _:h list:firstRest (_:a _:b).
    _:f :unpack _:a.
    _:r :unpack _:b.
}.

(_:b _:p _:f _:a _:c _:t _:l _:m) log:onNegativeSurface {
    () log:onNegativeSurface <<{
        _:b :package _:p.
    } :unpack _:f>>.
    _:p log:includes {
        _:a :content _:c.
        _:a :usable_until _:t.
    }.
    (:tomorrow :next_week) list:member _:t.
    _:c graph:list _:l.
    _:l :unpack _:m.
    _:m graph:union _:f.
}.

(_:b _:p _:a _:c _:t _:l _:m) log:onNegativeSurface {
    () log:onNegativeSurface <<{
        _:b :package _:p.
    } :unpack true>>.
    _:p log:includes {
        _:a :content _:c.
        _:a :usable_until _:t.
    }.
    (:yesterday :last_week) list:member _:t.
}.

(_:b _:p) log:onNegativeSurface {
    () log:onNegativeSurface <<{
        _:b :tag _:p.
    } :unpack true>>.
}.

(_:g _:r _:a _:p _:b _:q) log:onNegativeSurface {
    () log:onNegativeSurface <<_:g :unpack _:g>>.
    _:g log:rawType _:r.
    _:r log:notEqualTo rdf:List.
    _:g log:notIncludes {
        _:a :package _:p.
    }.
    _:g log:notIncludes {
        _:b :tag _:q.
    }.
}.
