# ------------
# Good Cobbler
# ------------
#
# Example from https://shs.hal.science/halshs-04148373/document
# Using functional logic http://intrologic.stanford.edu/chapters/chapter_11.html
#

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix : <urn:example:>.

# Some x is a good cobbler
# (:good :Cobbler) stands for the functional term good(Cobbler)
_:x a (:good :Cobbler).

(:good :Cobbler) rdfs:subClassOf :Cobbler.

# rdfs:subClassOf entailment
(?C ?D ?X) log:onNegativeSurface {
    ?C rdfs:subClassOf ?D.
    ?X a ?C.
    () log:onNegativeSurface {
        ?X a ?D.
    }.
}.
# invalid inference "x is good. x is a cobbler. therefore, x is a good cobbler".
# uncommenting the following 2 triples will blow a inference fuse
#_x a :good.
#_x a :Cobbler.

# maybe this is too strong in general
(?a ?b ?c) log:onNegativeSurface {
    ?a a ?b.
    ?a a ?c.
    () log:onNegativeSurface {
        () log:onNegativeSurface {
            ?a a (?b ?c).
        }.
    }.
}.

# some more thinking
# donald is a decoy duck, but it is not a duck

:donald a (:decoy :duck).

(:decoy :duck) rdfs:subClassOf :decoy.

# query
(?S ?C) log:onQuerySurface {
    ?S a ?C.
}.
