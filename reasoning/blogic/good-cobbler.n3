# ------------
# Good Cobbler
# ------------
#
# Example from https://shs.hal.science/halshs-04148373/document
# Using functional logic http://intrologic.stanford.edu/chapters/chapter_11.html
#

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix : <urn:example:>.

# Some x is a good cobbler
# (:good :Cobbler) stands for the functional term good(Cobbler)
_x a (:good :Cobbler).

(:good :Cobbler) rdfs:subClassOf :Cobbler.

# rdfs:subClassOf entailment
(_C _D _X) log:onNegativeSurface {
    _C rdfs:subClassOf _D.
    _X a _C.
    () log:onNegativeSurface {
        _X a _D.
    }.
}.
# invalid inference "x is good. x is a cobbler. therefore, x is a good cobbler".
# uncommenting the following 2 triples will blow a inference fuse
#_x a :good.
#_x a :Cobbler.

# maybe this is too strong in general
(_a _b _c) log:onNegativeSurface {
    _a a _b.
    _a a _c.
    () log:onNegativeSurface {
        () log:onNegativeSurface {
            _a a (_b _c).
        }.
    }.
}.

# some more thinking
# donald is a decoy duck, but it is not a duck

:donald a (:decoy :duck).

(:decoy :duck) rdfs:subClassOf :decoy.

# query
(_S _C) log:onQuerySurface {
    _S a _C.
}.
