# Partial evaluation
#
# See https://arxiv.org/pdf/cs/0202012.pdf:
# Program specialisation aims at improving the overall performance of programs by
# performing source to source transformations. A common approach, known as partial
# evaluation is to guide the transformation by partial knowledge about the input. In
# contrast to ordinary evaluation, partial evaluation is processing a given program
# P along with only part of its input, called the static input. The remaining part
# of the input, called the dynamic input, will only be known at some later point in
# time (which we call runtime). Given the static input S, the partial evaluator then
# produces a specialised version PS of P which, when given the dynamic input D,
# produces the same output as the original program P. The program PS is also called
# the residual program.
#
# See also https://www.sciencedirect.com/science/article/pii/0304397582901116:
# Mixed computation is processing of an incomplete information. Its product are a
# partially processed information and a so-called residual program destined to
# complete in sequel the processing of the remaining information. Many kinds of
# practical work with programs are nothing more but obtaining a residual program.
# We demonstrate, as an example, the application of mixed computation to compilation.
# Under computational approach mixed computation generalizes the operational semantics
# of a language by inclusion of steps which generate residual program instructions.
# Under transformational approach the residual program is obtained as a result of a
# series of so-called basic transformations of the program text. We argue that the
# transformational approach is more fundamental, for it allows to describe mixed
# computation in all its variety and moreover, to relate mixed computation to other
# kinds of program manipulation: execution, optimization, macroprocessing, synthesis.
# Such an integrated approach leads us to a transformational machine concept.

@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix schema: <http://schema.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.

# schema data
foaf:yahooChatID rdfs:subPropertyOf foaf:nick.
schema:LifestyleModification rdfs:subClassOf schema:MedicalTherapy.

# rdfs logic
(?P ?Q ?S ?O) log:onNegativeSurface {
    ?P rdfs:subPropertyOf ?Q.
    ?S ?P ?O.
    () log:onNegativeSurface {
        ?S ?Q ?O.
    }.
}.

(?C ?D ?X) log:onNegativeSurface {
    ?C rdfs:subClassOf ?D.
    ?X a ?C.
    () log:onNegativeSurface {
        ?X a ?D.
    }.
}.

# partial evaluation question
(?S ?P ?O ?A ?G ?H ?I ?J ?K ?B ?C ?U ?V) log:onQuestionSurface {
    ?S ?P ?O.
    ?P log:notEqualTo log:onNegativeSurface.
    ?P log:notEqualTo log:onQuestionSurface.
    ?A log:onNegativeSurface ?G.
    ?G log:notIncludes {?U log:onAnswerSurface ?V}.
    (?G {?G log:graffiti ?A}) graph:union ?H.
    (?H {?S ?P ?O. ?G log:graffiti ?B}) graph:difference ?I.
    ?G graph:length ?J.
    ?I graph:length ?K.
    ?J math:greaterThan ?K.
    ?B log:graffiti ?C.
    () log:onAnswerSurface {
        ?C log:onNegativeSurface ?I.
    }.
}.
