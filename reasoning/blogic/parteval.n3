# Partial evaluation
#
# See https://arxiv.org/pdf/cs/0202012.pdf:
# Program specialisation aims at improving the overall performance of programs by
# performing source to source transformations. A common approach, known as partial
# evaluation is to guide the transformation by partial knowledge about the input. In
# contrast to ordinary evaluation, partial evaluation is processing a given program
# P along with only part of its input, called the static input. The remaining part
# of the input, called the dynamic input, will only be known at some later point in
# time (which we call runtime). Given the static input S, the partial evaluator then
# produces a specialised version PS of P which, when given the dynamic input D,
# produces the same output as the original program P. The program PS is also called
# the residual program.
#
# See also https://www.sciencedirect.com/science/article/pii/0304397582901116:
# Mixed computation is processing of an incomplete information. Its product are a
# partially processed information and a so-called residual program destined to
# complete in sequel the processing of the remaining information. Many kinds of
# practical work with programs are nothing more but obtaining a residual program.
# We demonstrate, as an example, the application of mixed computation to compilation.
# Under computational approach mixed computation generalizes the operational semantics
# of a language by inclusion of steps which generate residual program instructions.
# Under transformational approach the residual program is obtained as a result of a
# series of so-called basic transformations of the program text. We argue that the
# transformational approach is more fundamental, for it allows to describe mixed
# computation in all its variety and moreover, to relate mixed computation to other
# kinds of program manipulation: execution, optimization, macroprocessing, synthesis.
# Such an integrated approach leads us to a transformational machine concept.

@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix schema: <http://schema.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.

# schema data
foaf:yahooChatID rdfs:subPropertyOf foaf:nick.
schema:LifestyleModification rdfs:subClassOf schema:MedicalTherapy.

# rdfs logic
(skolem:P skolem:Q skolem:S skolem:O) log:onNegativeSurface {
    skolem:P rdfs:subPropertyOf skolem:Q.
    skolem:S skolem:P skolem:O.
    () log:onNegativeSurface {
        skolem:S skolem:Q skolem:O.
    }.
}.

(skolem:C skolem:D skolem:X) log:onNegativeSurface {
    skolem:C rdfs:subClassOf skolem:D.
    skolem:X a skolem:C.
    () log:onNegativeSurface {
        skolem:X a skolem:D.
    }.
}.

# partial evaluation question
(skolem:S skolem:P skolem:O skolem:A skolem:G skolem:H skolem:I skolem:J skolem:K skolem:B skolem:C skolem:U skolem:V) log:onQuestionSurface {
    skolem:S skolem:P skolem:O.
    skolem:P log:notEqualTo log:onNegativeSurface.
    skolem:P log:notEqualTo log:onQuestionSurface.
    skolem:A log:onNegativeSurface skolem:G.
    skolem:G log:notIncludes {skolem:U log:onAnswerSurface skolem:V}.
    (skolem:G {skolem:G log:graffiti skolem:A}) graph:union skolem:H.
    (skolem:H {skolem:S skolem:P skolem:O. skolem:G log:graffiti skolem:B}) graph:difference skolem:I.
    skolem:G graph:length skolem:J.
    skolem:I graph:length skolem:K.
    skolem:J math:greaterThan skolem:K.
    skolem:B log:graffiti skolem:C.
    () log:onAnswerSurface {
        skolem:C log:onNegativeSurface skolem:I.
    }.
}.
