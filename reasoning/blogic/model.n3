# ----------------------------
# Policy model finding example
# ----------------------------

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix vcard: <http://www.w3.org/2006/vcard/ns#>.
@prefix : <http://example.org/ns#>.

# Pat is an individual
:Pat a vcard:Individual.

# if X is an individual then X can do A or B
(_X) log:onNegativeSurface {
    _X a vcard:Individual.
    () log:onNegativeSurface {
        _X :canDo :A.
    }.
    () log:onNegativeSurface {
        _X :canDo :B.
    }.
}.

# if X is an individual who can do A then X can do E or D
(_X) log:onNegativeSurface {
    #_X a vcard:Individual.
    _X :canDo :A.
    () log:onNegativeSurface {
        _X :canDo :E.
    }.
    () log:onNegativeSurface {
        _X :canDo :D.
    }.
}.

# if X is an individual who can do D then X can do E or F
(_X) log:onNegativeSurface {
    #_X a vcard:Individual.
    _X :canDo :D.
    () log:onNegativeSurface {
        _X :canDo :E.
    }.
    () log:onNegativeSurface {
        _X :canDo :F.
    }.
}.

# find model reaching goal
(_Goal _Sequents _Model) log:onNegativeSurface {
    () log:onNegativeSurface <<_Goal :findModel (_Sequents _Model _Model)>>.
    _Goal log:callWithCut true.
}.

(_Goal _Sequents1 _Model1 _Model _Prem _Cases _Case _Sequents2 _Model2) log:onNegativeSurface {
    () log:onNegativeSurface <<_Goal :findModel (_Sequents1 _Model1 _Model)>>.
    _Prem => _Cases.
    _Cases list:member _Case.
    _Prem log:call true.
    _Sequents1 list:notMember {_Prem => _Cases}.
    (_Sequents1 ({_Prem => _Cases})) list:append _Sequents2.
    (_Model1 (_Case)) list:append _Model2.
    true log:becomes _Case.
    {
        _Goal :findModel (_Sequents2 _Model2 _Model).
    } log:callWithCleanup {
        _Case log:becomes true.
    }.
}.

# find model where X is an individual who can do E
(_X _Model) log:onQuestionSurface {
    {
        _X a vcard:Individual.
        _X :canDo :E.
    } :findModel (() () _Model).
    () log:onAnswerSurface {
        {
            _X a vcard:Individual.
            _X :canDo :E.
        } :perModel _Model.
    }.
}.
