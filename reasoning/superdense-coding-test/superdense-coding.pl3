% Superdense coding using discrete quantum computing

:- op(1200, xfx, :+).

% |R) = |0, 0) + |1, 1)
r(false, false).
r(true, true).

% |S) = |0, 1) + |1, 0)
s(false, true).
s(true, false).

% |U) = |0, 0) + |1, 0) + |1, 1)
u(false, false).
u(true, false).
u(true, true).

% |V ) = |0, 0) + |0, 1) + |1, 0)
v(false, false).
v(false, true).
v(true, false).

% ID |0) = |0)
id(false, false).
% ID |1) = |1)
id(true, true).

% G |0) = |1)
g(false, true).
% G |1) = |0)
g(true, false).

% K |0) = |0)
k(false, false).
% K |1) = |0) + |1)
k(true, false).
k(true, true).

% KG
kg(X, Y) :-
    g(X, Z),
    k(Z, Y).

% GK
gk(X, Y) :-
    k(X, Z),
    g(Z, Y).

% alice
alice(0, [X, Y]) :-
    id(X, Y).
alice(1, [X, Y]) :-
    g(X, Y).
alice(2, [X, Y]) :-
    k(X, Y).
alice(3, [X, Y]) :-
    kg(X, Y).

% bob
bob([X, Y], 0) :-
    gk(X, Y).
bob([X, Y], 1) :-
    k(X, Y).
bob([X, Y], 2) :-
    g(X, Y).
bob([X, Y], 3) :-
    id(X, Y).

% superdense coding
'<https://eyereasoner.github.io/ns#sdc>'(N, M) :-
    r(X, Y),
    alice(N, [X, B]),
    bob([B, Y], M),
    (   '<https://eyereasoner.github.io/ns#sdcoding>'(N, M)
    ->  retract('<https://eyereasoner.github.io/ns#sdcoding>'(N, M))
    ;   assertz('<https://eyereasoner.github.io/ns#sdcoding>'(N, M))
    ).

% superdense coding appearing an odd number of times
'<https://eyereasoner.github.io/ns#sdconot>'(N, M) :+
    '<https://eyereasoner.github.io/ns#sdc>'(N, M).

% query
true :+ '<https://eyereasoner.github.io/ns#sdcoding>'(_, _).
