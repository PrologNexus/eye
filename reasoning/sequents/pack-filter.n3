@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix : <http://example.org/ns#>.

# sample data from RubenD
[] :data {
    [] :package {
        << [] :content {
            :a :b :c.
            [] :package {
                << [] :content {
                    :u :v :w.
                    [] :package {
                        << [] :content {
                            :x :y :z.
                        } >> :usable_until :yesterday.
                    }
                } >> :usable_until :tomorrow; :p :o.
            }
        } >> :usable_until :next_week.
    }.
}.

# testing unconditional sequent and see with --pass-only-new
true => ($
    {
        {
            ?l :data ?g.
            ?g :filter ?h.
        } => ?h.
    }
$).

# the logic for filter in 5 backward rules
{
    {
        ?a :package ?p.
    } :filter {
        ?a :package ?q; :tag :valid.
    }.
} <= {
    ?p log:includes {
        << ?b :content ?c >> :usable_until ?t.
    }.
    (:tomorrow :next_week) list:member ?t.
    ?c graph:list ?l.
    ?l :filter ?m.
    ?p graph:list ?n.
    (?m ?n) list:append ?o.
    ?o graph:union ?q.
}.

{
    {
        ?a :package ?p.
    } :filter true.
} <= {
    ?p log:includes {
        << ?b :content ?c >> :usable_until ?t.
    }.
    (:yesterday :last_week) list:member ?t.
}.

{
    () :filter ().
} <= true.

{
    ?g :filter ?h.
} <= {
    ?g list:firstRest (?f ?r).
    ?h list:firstRest (?a ?b).
    ?f :filter ?a.
    ?r :filter ?b.
}.

{
    ?g :filter ?g.
} <= {
    ?g log:rawType ?r.
    ?r log:notEqualTo rdf:List.
    ?g log:notIncludes {
        ?a :package ?p.
    }.
}.
