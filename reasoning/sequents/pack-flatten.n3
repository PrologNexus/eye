@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix : <http://example.org/ns#>.

# sample data from RubenD
[] :data {
    [] :package {
        << [] :content {
            :a :b :c.
            [] :package {
                << [] :content {
                    :u :v :w.
                    [] :package {
                        << [] :content {
                            :x :y :z.
                        } >> :usable_until :yesterday.
                    }
                } >> :usable_until :tomorrow; :p :o.
            }
        } >> :usable_until :next_week.
    }.
}.

# testing unconditional sequent and see with --pass-only-new
true => ($
    {
        {
            ?l :data ?g.
            ?g :flatten ?h.
        } => ?h.
    }
$).

# the logic for flatten in 4 backward rules
{
    {
        ?b :package ?p.
    } :flatten ?d.
} <= {
    ?p log:includes {
        << ?a :content ?c >> ?q ?t.
    }.
    ?c graph:list ?l.
    ?l :flatten ?m.
    ?m graph:union ?d.
}.

{
    () :flatten ().
} <= true.

{
    ?g :flatten ?h.
} <= {
    ?g list:firstRest (?f ?r).
    ?h list:firstRest (?a ?b).
    ?f :flatten ?a.
    ?r :flatten ?b.
}.

{
    ?g :flatten ?g.
} <= {
    ?g log:rawType ?r.
    ?r log:notEqualTo rdf:List.
    ?g log:notIncludes {
        ?a :package ?p.
    }.
}.
