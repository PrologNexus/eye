---------
RDF logic
---------

Using RDF to describe logic rules and queries.

RDF logic supports reasoning with forward rules described in RDF e.g.

    # subclass rule
    [ log:univ (log:conjunction
        [ log:univ (log:triple var:A rdfs:subClassOf var:B)]
        [ log:univ (log:triple var:S rdf:type var:A)]
    )] log:implies [ log:univ (log:conjunction
        [ log:univ (log:triple var:S rdf:type var:B )]
    )].

RDF logic supports reasoning with backward rules described in RDF e.g.

    # calculate the age of a person
    [ log:univ (log:conjunction
        [ log:univ (log:triple var:S :ageAbove var:A)]
    )] log:isImpliedBy [ log:univ (log:conjunction
        [ log:univ (log:triple var:S :birthDay var:B)]
        [ log:univ (log:triple "" time:localTime var:D)]
        [ log:univ (log:triple (var:D var:B) math:difference var:F)]
        [ log:univ (log:triple var:F math:greaterThan var:A)]
    )].

RDF logic supports querying with queries described in RDF e.g.

    # query: is the age of a person above some duration?
    [ log:univ (log:conjunction
        [ log:univ (log:triple var:S :ageAbove "P80Y"^^xsd:duration)]
    )] log:query [ log:univ (log:conjunction
        [ log:univ (log:triple var:S :ageAbove "P80Y"^^xsd:duration)]
    )].

RDF logic supports reasoning with rdfsurfaces described in RDF as

    # a city is a human community
    (_:x) log:onNegativeSurface <<
        log:conjunction log:isFunctorOf (
            << _:x a :City >>
            << () log:onNegativeSurface <<
                    log:conjunction log:isFunctorOf (
                        << _:x a :HumanCommunity >>
                    )
                >>
            >>
        )
    >>.

The var: prefix is <http://www.w3.org/2000/10/swap/var#> and is used for
variables that are interpreted as universally quantified variables except for
forward rule conclusion-only variables which are interpreted existentially.

Literal subjects are described as

    [] rdf:value "aha"; :p :o.
