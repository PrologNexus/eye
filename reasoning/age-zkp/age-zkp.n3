@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix crypto: <http://www.w3.org/2000/10/swap/crypto#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <https://example.org/#>.

# private person data
:Mary :birthDay "2000-01-01"^^xsd:date.
:Pat :birthDay "1970-01-01"^^xsd:date.
:John :birthDay "1960-01-01"^^xsd:date.

# simulation date
:simulation1 :date "2025-01-11T00:00:00.0Z"^^xsd:dateTime.

# simulation age
:simulation1 :age "P50Y"^^xsd:duration.

# prover proving that someone is above some age using a hash and without revealing their age
{ :simulation1 :zeroKnowledgeProof (?Name ?Result ?Hash) } <= {
    ?Name :birthDay ?BirthDay.
    :simulation1 :date ?Date.
    :simulation1 :age ?Age.
    (?Date ?BirthDay) math:difference ?Diff.
    ({ ?Diff math:greaterThan ?Age }) string:concatenation ?Str.
    ?Str crypto:sha256 ?Hash.
    (
        { ?Diff math:greaterThan ?Age }
        { ?Result log:equalTo ("proof verified: " ?Name " is more than 50 years old and entitled to work 80% per week")!string:concatenation }
        { ?Result log:equalTo ("proof failed: " ?Name " is less than 50 years and not entitled to work 80% per week")!string:concatenation }
    ) log:ifThenElseIn (?Context -1).
}.

# challenging the proof using the hash
{ :simulation1 :challengeProof (?Name ?Result ?Hash) } <= {
    ?Name :birthDay ?BirthDay.
    :simulation1 :date ?Date.
    :simulation1 :age ?Age.
    (?Date ?BirthDay) math:difference ?Diff.
    ({ ?Diff math:greaterThan ?Age }) string:concatenation ?Str.
    ?Str crypto:sha256 ?ProofHash.
    (
        { ?Hash log:equalTo ?ProofHash }
        { ?Result log:equalTo ("challenge successful: the proof is valid")!string:concatenation }
        { ?Result log:equalTo ("challenge failed: the proof is invalid")!string:concatenation }
    ) log:ifThenElseIn (?Context -1).
}.

# queries
{
    ?S :zeroKnowledgeProof (:Mary ?Result ?Hash).
} log:query {
    ?S :zeroKnowledgeProof (:Mary ?Result ?Hash).
}.

{
    ?S :zeroKnowledgeProof (:Pat ?Result ?Hash).
} log:query {
    ?S :zeroKnowledgeProof (:Pat ?Result ?Hash).
}.

{
    ?S :challengeProof (:Mary ?Result "adf23913cd97b2d831b54cf9109c111d205d8dfd777413235bdb1c7c91cf4007").
} log:query {
    ?S :challengeProof (:Mary ?Result "adf23913cd97b2d831b54cf9109c111d205d8dfd777413235bdb1c7c91cf4007").
}.

{
    ?S :challengeProof (:Pat ?Result "5611fb0dfa67e894917f81cf4b24577e4bc89c86c17423ba7fc28181eb368b3b").
} log:query {
    ?S :challengeProof (:Pat ?Result "5611fb0dfa67e894917f81cf4b24577e4bc89c86c17423ba7fc28181eb368b3b").
}.
