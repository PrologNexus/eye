@prefix skolem: <https://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <https://eyereasoner.github.io/eye/reasoning#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:gives {
        @forSome var:x_0. var:x_0 :saying :C.
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        @forSome var:x_0. var:x_0 :saying :C.
    };
    r:evidence (
        skolem:lemma2
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]];
    r:rule skolem:lemma3.

skolem:lemma2 a r:Inference;
    r:gives {
        @forSome var:x_0. var:x_0 :saying :C.
    };
    r:evidence (
        [ a r:Fact; r:gives {@forSome var:x_0. true => ($ {
            var:x_0 :saying :A.
        } {
            var:x_0 :saying :B.
        } $)}]
        [ a r:Fact; r:gives {@forSome var:x_0. {
            var:x_0 :saying :A.
        } => {
            var:x_0 :saying :C.
        }}]
        [ a r:Fact; r:gives {@forSome var:x_0. {
            var:x_0 :saying :B.
        } => {
            var:x_0 :saying :C.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo {
        var:x_0 :saying :C.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo {
        var:x_0 :saying :A.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo {
        var:x_0 :saying :B.
    }];
    r:rule skolem:lemma4.

skolem:lemma3 a r:Extraction;
    r:gives {
        @forAll var:x_0. {
            var:x_0 :saying :C.
        } => {
            var:x_0 :saying :C.
        }.
    };
    r:because [ a r:Parsing; r:source <https://eyereasoner.github.io/eye/reasoning/disjunction-elimination/disjunction-elimination.n3>].

skolem:lemma4 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2. {
            true => ($ var:x_0 var:x_1 $).
            var:x_0 => var:x_2.
            var:x_1 => var:x_2.
        } => var:x_2.
    };
    r:because [ a r:Parsing; r:source <https://eyereasoner.github.io/eye/reasoning/disjunction-elimination/disjunction-elimination.n3>].

