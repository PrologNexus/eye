@prefix skolem: <https://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix : <urn:example:>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix graph: <http://www.w3.org/2000/10/swap/graph#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:gives {
        :test :is true.
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        :test :is true.
    };
    r:evidence (
        skolem:lemma2
    );
    r:rule skolem:lemma3.

skolem:lemma2 a r:Inference;
    r:gives {
        :test :is true.
    };
    r:evidence (
        skolem:lemma4
    );
    r:rule skolem:lemma5.

skolem:lemma3 a r:Extraction;
    r:gives {
        {
            :test :is true.
        } => {
            :test :is true.
        }.
    };
    r:because [ a r:Parsing; r:source <https://eyereasoner.github.io/eye/reasoning/nand/query.n3>].

skolem:lemma4 a r:Inference;
    r:gives {
        :Q a :Test.
    };
    r:evidence (
        skolem:lemma6
        skolem:lemma7
    );
    r:rule skolem:lemma8.

skolem:lemma5 a r:Extraction;
    r:gives {
        {
            :Q a :Test.
        } => {
            :test :is true.
        }.
    };
    r:because [ a r:Parsing; r:source <https://eyereasoner.github.io/eye/reasoning/nand/test3.n3>].

skolem:lemma6 a r:Inference;
    r:gives {
        {
            :P a :Test.
        } => false.
    };
    r:evidence (
        [ a r:Fact; r:gives true]
    );
    r:rule skolem:lemma9.

skolem:lemma7 a r:Inference;
    r:gives {
        {
            :R a :Test.
        } => false.
    };
    r:evidence (
        [ a r:Fact; r:gives true]
    );
    r:rule skolem:lemma10.

skolem:lemma8 a r:Inference;
    r:gives {
        {
            {
                :P a :Test.
            } => false.
            {
                :R a :Test.
            } => false.
        } => {
            :Q a :Test.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {<https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand> log:equalTo <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand>}]
        [ a r:Fact; r:gives {{
            {
                :P a :Test.
            } => false.
            {
                :Q a :Test.
            } => false.
            {
                :R a :Test.
            } => false.
        } => false}]
        [ a r:Fact; r:gives {{
            {
                :P a :Test.
            } => false.
            {
                :Q a :Test.
            } => false.
            {
                :R a :Test.
            } => false.
        } graph:list ({
            {
                :P a :Test.
            } => false.
        } {
            {
                :Q a :Test.
            } => false.
        } {
            {
                :R a :Test.
            } => false.
        })}]
        [ a r:Fact; r:gives {({
            {
                :P a :Test.
            } => false.
        } {
            {
                :Q a :Test.
            } => false.
        } {
            {
                :R a :Test.
            } => false.
        }) list:select ({
            {
                :Q a :Test.
            } => false.
        } ({
            {
                :P a :Test.
            } => false.
        } {
            {
                :R a :Test.
            } => false.
        }))}]
        [ a r:Fact; r:gives {{
            {
                :P a :Test.
            } => false.
            {
                :R a :Test.
            } => false.
        } graph:list ({
            {
                :P a :Test.
            } => false.
        } {
            {
                :R a :Test.
            } => false.
        })}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo {
        {
            :P a :Test.
        } => false.
        {
            :Q a :Test.
        } => false.
        {
            :R a :Test.
        } => false.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo ({
        {
            :P a :Test.
        } => false.
    } {
        {
            :Q a :Test.
        } => false.
    } {
        {
            :R a :Test.
        } => false.
    })];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo {
        :Q a :Test.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo ({
        {
            :P a :Test.
        } => false.
    } {
        {
            :R a :Test.
        } => false.
    })];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_4"]; r:boundTo {
        {
            :P a :Test.
        } => false.
        {
            :R a :Test.
        } => false.
    }];
    r:rule skolem:lemma11.

skolem:lemma9 a r:Inference;
    r:gives {
        true => {
            {
                :P a :Test.
            } => false.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {<https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand> log:equalTo <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand>}]
        skolem:lemma6
        [ a r:Fact; r:gives {{
            :P a :Test.
        } graph:list ({
            :P a :Test.
        })}]
        [ a r:Fact; r:gives {({
            :P a :Test.
        }) list:select ({
            :P a :Test.
        } ())}]
        [ a r:Fact; r:gives {{
            :P a :Test.
        } log:notIsomorphic {
            _:sk_0 => false.
        }}]
        [ a r:Fact; r:gives {true graph:list ()}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo {
        :P a :Test.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo ({
        :P a :Test.
    })];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo {
        :P a :Test.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo ()];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_5"]; r:boundTo true];
    r:rule skolem:lemma12.

skolem:lemma10 a r:Inference;
    r:gives {
        true => {
            {
                :R a :Test.
            } => false.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {<https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand> log:equalTo <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand>}]
        skolem:lemma7
        [ a r:Fact; r:gives {{
            :R a :Test.
        } graph:list ({
            :R a :Test.
        })}]
        [ a r:Fact; r:gives {({
            :R a :Test.
        }) list:select ({
            :R a :Test.
        } ())}]
        [ a r:Fact; r:gives {{
            :R a :Test.
        } log:notIsomorphic {
            _:sk_1 => false.
        }}]
        [ a r:Fact; r:gives {true graph:list ()}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo {
        :R a :Test.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo ({
        :R a :Test.
    })];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo {
        :R a :Test.
    }];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo ()];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_5"]; r:boundTo true];
    r:rule skolem:lemma12.

skolem:lemma11 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2, var:x_3, var:x_4. {
            <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand> log:equalTo <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand>.
            var:x_0 => false.
            var:x_0 graph:list var:x_1.
            var:x_1 list:select ({
                var:x_2 => false.
            } var:x_3).
            var:x_4 graph:list var:x_3.
        } => {
            var:x_4 => var:x_2.
        }.
    };
    r:because [ a r:Parsing; r:source <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3>].

skolem:lemma12 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2, var:x_3, var:x_4, var:x_5. {
            <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand> log:equalTo <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3#nand>.
            var:x_0 => false.
            var:x_0 graph:list var:x_1.
            var:x_1 list:select (var:x_2 var:x_3).
            var:x_2 log:notIsomorphic {
                var:x_4 => false.
            }.
            var:x_5 graph:list var:x_3.
        } => {
            var:x_5 => {
                var:x_2 => false.
            }.
        }.
    };
    r:because [ a r:Parsing; r:source <https://eyereasoner.github.io/eye/reasoning/nand/nand.n3>].

