@prefix skolem: <https://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix : <http://example.org/#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:component skolem:lemma2;
    r:component skolem:lemma3;
    r:component skolem:lemma4;
    r:component skolem:lemma5;
    r:component skolem:lemma6;
    r:component skolem:lemma7;
    r:component skolem:lemma8;
    r:component skolem:lemma9;
    r:component skolem:lemma10;
    r:component skolem:lemma11;
    r:component skolem:lemma12;
    r:component skolem:lemma13;
    r:component skolem:lemma14;
    r:component skolem:lemma15;
    r:component skolem:lemma16;
    r:component skolem:lemma17;
    r:component skolem:lemma18;
    r:component skolem:lemma19;
    r:component skolem:lemma20;
    r:component skolem:lemma21;
    r:component skolem:lemma22;
    r:component skolem:lemma23;
    r:component skolem:lemma24;
    r:component skolem:lemma25;
    r:component skolem:lemma26;
    r:component skolem:lemma27;
    r:component skolem:lemma28;
    r:component skolem:lemma29;
    r:component skolem:lemma30;
    r:component skolem:lemma31;
    r:component skolem:lemma32;
    r:component skolem:lemma33;
    r:component skolem:lemma34;
    r:component skolem:lemma35;
    r:component skolem:lemma36;
    r:component skolem:lemma37;
    r:component skolem:lemma38;
    r:component skolem:lemma39;
    r:component skolem:lemma40;
    r:component skolem:lemma41;
    r:component skolem:lemma42;
    r:component skolem:lemma43;
    r:component skolem:lemma44;
    r:component skolem:lemma45;
    r:component skolem:lemma46;
    r:component skolem:lemma47;
    r:component skolem:lemma48;
    r:component skolem:lemma49;
    r:component skolem:lemma50;
    r:component skolem:lemma51;
    r:component skolem:lemma52;
    r:component skolem:lemma53;
    r:component skolem:lemma54;
    r:component skolem:lemma55;
    r:component skolem:lemma56;
    r:component skolem:lemma57;
    r:component skolem:lemma58;
    r:component skolem:lemma59;
    r:component skolem:lemma60;
    r:component skolem:lemma61;
    r:component skolem:lemma62;
    r:component skolem:lemma63;
    r:component skolem:lemma64;
    r:component skolem:lemma65;
    r:component skolem:lemma66;
    r:component skolem:lemma67;
    r:component skolem:lemma68;
    r:component skolem:lemma69;
    r:component skolem:lemma70;
    r:component skolem:lemma71;
    r:component skolem:lemma72;
    r:component skolem:lemma73;
    r:component skolem:lemma74;
    r:component skolem:lemma75;
    r:component skolem:lemma76;
    r:component skolem:lemma77;
    r:component skolem:lemma78;
    r:component skolem:lemma79;
    r:component skolem:lemma80;
    r:component skolem:lemma81;
    r:component skolem:lemma82;
    r:component skolem:lemma83;
    r:component skolem:lemma84;
    r:component skolem:lemma85;
    r:component skolem:lemma86;
    r:component skolem:lemma87;
    r:component skolem:lemma88;
    r:component skolem:lemma89;
    r:component skolem:lemma90;
    r:component skolem:lemma91;
    r:component skolem:lemma92;
    r:component skolem:lemma93;
    r:component skolem:lemma94;
    r:component skolem:lemma95;
    r:component skolem:lemma96;
    r:component skolem:lemma97;
    r:component skolem:lemma98;
    r:component skolem:lemma99;
    r:component skolem:lemma100;
    r:component skolem:lemma101;
    r:component skolem:lemma102;
    r:component skolem:lemma103;
    r:component skolem:lemma104;
    r:component skolem:lemma105;
    r:component skolem:lemma106;
    r:component skolem:lemma107;
    r:component skolem:lemma108;
    r:component skolem:lemma109;
    r:component skolem:lemma110;
    r:component skolem:lemma111;
    r:component skolem:lemma112;
    r:component skolem:lemma113;
    r:component skolem:lemma114;
    r:component skolem:lemma115;
    r:component skolem:lemma116;
    r:component skolem:lemma117;
    r:component skolem:lemma118;
    r:component skolem:lemma119;
    r:component skolem:lemma120;
    r:component skolem:lemma121;
    r:component skolem:lemma122;
    r:component skolem:lemma123;
    r:component skolem:lemma124;
    r:component skolem:lemma125;
    r:component skolem:lemma126;
    r:component skolem:lemma127;
    r:component skolem:lemma128;
    r:component skolem:lemma129;
    r:component skolem:lemma130;
    r:component skolem:lemma131;
    r:component skolem:lemma132;
    r:component skolem:lemma133;
    r:component skolem:lemma134;
    r:component skolem:lemma135;
    r:component skolem:lemma136;
    r:component skolem:lemma137;
    r:component skolem:lemma138;
    r:component skolem:lemma139;
    r:component skolem:lemma140;
    r:component skolem:lemma141;
    r:component skolem:lemma142;
    r:component skolem:lemma143;
    r:component skolem:lemma144;
    r:component skolem:lemma145;
    r:component skolem:lemma146;
    r:component skolem:lemma147;
    r:component skolem:lemma148;
    r:component skolem:lemma149;
    r:component skolem:lemma150;
    r:component skolem:lemma151;
    r:component skolem:lemma152;
    r:component skolem:lemma153;
    r:component skolem:lemma154;
    r:component skolem:lemma155;
    r:component skolem:lemma156;
    r:component skolem:lemma157;
    r:component skolem:lemma158;
    r:component skolem:lemma159;
    r:component skolem:lemma160;
    r:component skolem:lemma161;
    r:component skolem:lemma162;
    r:component skolem:lemma163;
    r:component skolem:lemma164;
    r:component skolem:lemma165;
    r:component skolem:lemma166;
    r:component skolem:lemma167;
    r:component skolem:lemma168;
    r:component skolem:lemma169;
    r:component skolem:lemma170;
    r:component skolem:lemma171;
    r:component skolem:lemma172;
    r:component skolem:lemma173;
    r:component skolem:lemma174;
    r:component skolem:lemma175;
    r:component skolem:lemma176;
    r:component skolem:lemma177;
    r:component skolem:lemma178;
    r:component skolem:lemma179;
    r:component skolem:lemma180;
    r:component skolem:lemma181;
    r:component skolem:lemma182;
    r:component skolem:lemma183;
    r:component skolem:lemma184;
    r:component skolem:lemma185;
    r:component skolem:lemma186;
    r:component skolem:lemma187;
    r:component skolem:lemma188;
    r:component skolem:lemma189;
    r:component skolem:lemma190;
    r:component skolem:lemma191;
    r:component skolem:lemma192;
    r:component skolem:lemma193;
    r:component skolem:lemma194;
    r:component skolem:lemma195;
    r:component skolem:lemma196;
    r:component skolem:lemma197;
    r:component skolem:lemma198;
    r:component skolem:lemma199;
    r:component skolem:lemma200;
    r:component skolem:lemma201;
    r:component skolem:lemma202;
    r:component skolem:lemma203;
    r:component skolem:lemma204;
    r:component skolem:lemma205;
    r:component skolem:lemma206;
    r:component skolem:lemma207;
    r:component skolem:lemma208;
    r:component skolem:lemma209;
    r:component skolem:lemma210;
    r:component skolem:lemma211;
    r:component skolem:lemma212;
    r:component skolem:lemma213;
    r:component skolem:lemma214;
    r:component skolem:lemma215;
    r:component skolem:lemma216;
    r:component skolem:lemma217;
    r:component skolem:lemma218;
    r:component skolem:lemma219;
    r:component skolem:lemma220;
    r:component skolem:lemma221;
    r:component skolem:lemma222;
    r:component skolem:lemma223;
    r:component skolem:lemma224;
    r:component skolem:lemma225;
    r:component skolem:lemma226;
    r:component skolem:lemma227;
    r:component skolem:lemma228;
    r:component skolem:lemma229;
    r:component skolem:lemma230;
    r:component skolem:lemma231;
    r:component skolem:lemma232;
    r:component skolem:lemma233;
    r:component skolem:lemma234;
    r:component skolem:lemma235;
    r:component skolem:lemma236;
    r:component skolem:lemma237;
    r:component skolem:lemma238;
    r:component skolem:lemma239;
    r:component skolem:lemma240;
    r:component skolem:lemma241;
    r:component skolem:lemma242;
    r:component skolem:lemma243;
    r:component skolem:lemma244;
    r:component skolem:lemma245;
    r:component skolem:lemma246;
    r:component skolem:lemma247;
    r:component skolem:lemma248;
    r:component skolem:lemma249;
    r:component skolem:lemma250;
    r:component skolem:lemma251;
    r:component skolem:lemma252;
    r:component skolem:lemma253;
    r:component skolem:lemma254;
    r:component skolem:lemma255;
    r:component skolem:lemma256;
    r:component skolem:lemma257;
    r:component skolem:lemma258;
    r:component skolem:lemma259;
    r:component skolem:lemma260;
    r:component skolem:lemma261;
    r:component skolem:lemma262;
    r:component skolem:lemma263;
    r:component skolem:lemma264;
    r:component skolem:lemma265;
    r:component skolem:lemma266;
    r:component skolem:lemma267;
    r:component skolem:lemma268;
    r:component skolem:lemma269;
    r:component skolem:lemma270;
    r:component skolem:lemma271;
    r:component skolem:lemma272;
    r:component skolem:lemma273;
    r:component skolem:lemma274;
    r:component skolem:lemma275;
    r:component skolem:lemma276;
    r:component skolem:lemma277;
    r:component skolem:lemma278;
    r:component skolem:lemma279;
    r:component skolem:lemma280;
    r:component skolem:lemma281;
    r:component skolem:lemma282;
    r:component skolem:lemma283;
    r:component skolem:lemma284;
    r:component skolem:lemma285;
    r:component skolem:lemma286;
    r:component skolem:lemma287;
    r:component skolem:lemma288;
    r:component skolem:lemma289;
    r:component skolem:lemma290;
    r:component skolem:lemma291;
    r:component skolem:lemma292;
    r:component skolem:lemma293;
    r:component skolem:lemma294;
    r:component skolem:lemma295;
    r:component skolem:lemma296;
    r:component skolem:lemma297;
    r:component skolem:lemma298;
    r:component skolem:lemma299;
    r:component skolem:lemma300;
    r:component skolem:lemma301;
    r:component skolem:lemma302;
    r:component skolem:lemma303;
    r:component skolem:lemma304;
    r:component skolem:lemma305;
    r:component skolem:lemma306;
    r:component skolem:lemma307;
    r:component skolem:lemma308;
    r:component skolem:lemma309;
    r:component skolem:lemma310;
    r:component skolem:lemma311;
    r:component skolem:lemma312;
    r:component skolem:lemma313;
    r:component skolem:lemma314;
    r:component skolem:lemma315;
    r:component skolem:lemma316;
    r:component skolem:lemma317;
    r:component skolem:lemma318;
    r:component skolem:lemma319;
    r:component skolem:lemma320;
    r:component skolem:lemma321;
    r:component skolem:lemma322;
    r:component skolem:lemma323;
    r:component skolem:lemma324;
    r:component skolem:lemma325;
    r:component skolem:lemma326;
    r:component skolem:lemma327;
    r:component skolem:lemma328;
    r:component skolem:lemma329;
    r:component skolem:lemma330;
    r:component skolem:lemma331;
    r:component skolem:lemma332;
    r:component skolem:lemma333;
    r:component skolem:lemma334;
    r:component skolem:lemma335;
    r:component skolem:lemma336;
    r:component skolem:lemma337;
    r:component skolem:lemma338;
    r:component skolem:lemma339;
    r:component skolem:lemma340;
    r:component skolem:lemma341;
    r:component skolem:lemma342;
    r:component skolem:lemma343;
    r:component skolem:lemma344;
    r:component skolem:lemma345;
    r:component skolem:lemma346;
    r:component skolem:lemma347;
    r:component skolem:lemma348;
    r:component skolem:lemma349;
    r:component skolem:lemma350;
    r:component skolem:lemma351;
    r:component skolem:lemma352;
    r:component skolem:lemma353;
    r:component skolem:lemma354;
    r:component skolem:lemma355;
    r:component skolem:lemma356;
    r:component skolem:lemma357;
    r:component skolem:lemma358;
    r:component skolem:lemma359;
    r:component skolem:lemma360;
    r:component skolem:lemma361;
    r:component skolem:lemma362;
    r:component skolem:lemma363;
    r:component skolem:lemma364;
    r:component skolem:lemma365;
    r:component skolem:lemma366;
    r:component skolem:lemma367;
    r:component skolem:lemma368;
    r:component skolem:lemma369;
    r:component skolem:lemma370;
    r:component skolem:lemma371;
    r:component skolem:lemma372;
    r:component skolem:lemma373;
    r:component skolem:lemma374;
    r:component skolem:lemma375;
    r:component skolem:lemma376;
    r:component skolem:lemma377;
    r:component skolem:lemma378;
    r:component skolem:lemma379;
    r:component skolem:lemma380;
    r:component skolem:lemma381;
    r:component skolem:lemma382;
    r:component skolem:lemma383;
    r:component skolem:lemma384;
    r:component skolem:lemma385;
    r:component skolem:lemma386;
    r:component skolem:lemma387;
    r:component skolem:lemma388;
    r:component skolem:lemma389;
    r:component skolem:lemma390;
    r:component skolem:lemma391;
    r:component skolem:lemma392;
    r:component skolem:lemma393;
    r:component skolem:lemma394;
    r:component skolem:lemma395;
    r:component skolem:lemma396;
    r:component skolem:lemma397;
    r:component skolem:lemma398;
    r:component skolem:lemma399;
    r:component skolem:lemma400;
    r:component skolem:lemma401;
    r:component skolem:lemma402;
    r:component skolem:lemma403;
    r:component skolem:lemma404;
    r:component skolem:lemma405;
    r:component skolem:lemma406;
    r:component skolem:lemma407;
    r:component skolem:lemma408;
    r:component skolem:lemma409;
    r:component skolem:lemma410;
    r:component skolem:lemma411;
    r:component skolem:lemma412;
    r:component skolem:lemma413;
    r:component skolem:lemma414;
    r:component skolem:lemma415;
    r:component skolem:lemma416;
    r:component skolem:lemma417;
    r:component skolem:lemma418;
    r:component skolem:lemma419;
    r:component skolem:lemma420;
    r:component skolem:lemma421;
    r:component skolem:lemma422;
    r:component skolem:lemma423;
    r:component skolem:lemma424;
    r:component skolem:lemma425;
    r:component skolem:lemma426;
    r:component skolem:lemma427;
    r:component skolem:lemma428;
    r:component skolem:lemma429;
    r:component skolem:lemma430;
    r:component skolem:lemma431;
    r:component skolem:lemma432;
    r:component skolem:lemma433;
    r:component skolem:lemma434;
    r:component skolem:lemma435;
    r:component skolem:lemma436;
    r:component skolem:lemma437;
    r:component skolem:lemma438;
    r:component skolem:lemma439;
    r:component skolem:lemma440;
    r:component skolem:lemma441;
    r:component skolem:lemma442;
    r:component skolem:lemma443;
    r:component skolem:lemma444;
    r:component skolem:lemma445;
    r:component skolem:lemma446;
    r:component skolem:lemma447;
    r:component skolem:lemma448;
    r:component skolem:lemma449;
    r:component skolem:lemma450;
    r:component skolem:lemma451;
    r:component skolem:lemma452;
    r:component skolem:lemma453;
    r:component skolem:lemma454;
    r:component skolem:lemma455;
    r:component skolem:lemma456;
    r:component skolem:lemma457;
    r:component skolem:lemma458;
    r:component skolem:lemma459;
    r:component skolem:lemma460;
    r:component skolem:lemma461;
    r:component skolem:lemma462;
    r:component skolem:lemma463;
    r:component skolem:lemma464;
    r:component skolem:lemma465;
    r:component skolem:lemma466;
    r:component skolem:lemma467;
    r:component skolem:lemma468;
    r:component skolem:lemma469;
    r:component skolem:lemma470;
    r:component skolem:lemma471;
    r:component skolem:lemma472;
    r:component skolem:lemma473;
    r:component skolem:lemma474;
    r:component skolem:lemma475;
    r:component skolem:lemma476;
    r:component skolem:lemma477;
    r:component skolem:lemma478;
    r:component skolem:lemma479;
    r:component skolem:lemma480;
    r:component skolem:lemma481;
    r:component skolem:lemma482;
    r:component skolem:lemma483;
    r:component skolem:lemma484;
    r:component skolem:lemma485;
    r:component skolem:lemma486;
    r:component skolem:lemma487;
    r:component skolem:lemma488;
    r:component skolem:lemma489;
    r:component skolem:lemma490;
    r:component skolem:lemma491;
    r:component skolem:lemma492;
    r:component skolem:lemma493;
    r:component skolem:lemma494;
    r:component skolem:lemma495;
    r:component skolem:lemma496;
    r:component skolem:lemma497;
    r:component skolem:lemma498;
    r:component skolem:lemma499;
    r:component skolem:lemma500;
    r:component skolem:lemma501;
    r:component skolem:lemma502;
    r:component skolem:lemma503;
    r:component skolem:lemma504;
    r:component skolem:lemma505;
    r:component skolem:lemma506;
    r:component skolem:lemma507;
    r:component skolem:lemma508;
    r:component skolem:lemma509;
    r:component skolem:lemma510;
    r:component skolem:lemma511;
    r:component skolem:lemma512;
    r:component skolem:lemma513;
    r:component skolem:lemma514;
    r:component skolem:lemma515;
    r:component skolem:lemma516;
    r:component skolem:lemma517;
    r:component skolem:lemma518;
    r:component skolem:lemma519;
    r:component skolem:lemma520;
    r:component skolem:lemma521;
    r:component skolem:lemma522;
    r:component skolem:lemma523;
    r:component skolem:lemma524;
    r:component skolem:lemma525;
    r:component skolem:lemma526;
    r:component skolem:lemma527;
    r:component skolem:lemma528;
    r:component skolem:lemma529;
    r:component skolem:lemma530;
    r:component skolem:lemma531;
    r:component skolem:lemma532;
    r:component skolem:lemma533;
    r:component skolem:lemma534;
    r:component skolem:lemma535;
    r:component skolem:lemma536;
    r:component skolem:lemma537;
    r:component skolem:lemma538;
    r:component skolem:lemma539;
    r:component skolem:lemma540;
    r:component skolem:lemma541;
    r:component skolem:lemma542;
    r:component skolem:lemma543;
    r:component skolem:lemma544;
    r:component skolem:lemma545;
    r:component skolem:lemma546;
    r:component skolem:lemma547;
    r:component skolem:lemma548;
    r:component skolem:lemma549;
    r:component skolem:lemma550;
    r:component skolem:lemma551;
    r:component skolem:lemma552;
    r:component skolem:lemma553;
    r:component skolem:lemma554;
    r:component skolem:lemma555;
    r:component skolem:lemma556;
    r:component skolem:lemma557;
    r:component skolem:lemma558;
    r:component skolem:lemma559;
    r:component skolem:lemma560;
    r:component skolem:lemma561;
    r:component skolem:lemma562;
    r:component skolem:lemma563;
    r:component skolem:lemma564;
    r:component skolem:lemma565;
    r:component skolem:lemma566;
    r:component skolem:lemma567;
    r:component skolem:lemma568;
    r:component skolem:lemma569;
    r:component skolem:lemma570;
    r:component skolem:lemma571;
    r:component skolem:lemma572;
    r:component skolem:lemma573;
    r:component skolem:lemma574;
    r:component skolem:lemma575;
    r:component skolem:lemma576;
    r:component skolem:lemma577;
    r:component skolem:lemma578;
    r:component skolem:lemma579;
    r:component skolem:lemma580;
    r:component skolem:lemma581;
    r:component skolem:lemma582;
    r:component skolem:lemma583;
    r:component skolem:lemma584;
    r:component skolem:lemma585;
    r:component skolem:lemma586;
    r:component skolem:lemma587;
    r:component skolem:lemma588;
    r:component skolem:lemma589;
    r:component skolem:lemma590;
    r:component skolem:lemma591;
    r:component skolem:lemma592;
    r:component skolem:lemma593;
    r:component skolem:lemma594;
    r:component skolem:lemma595;
    r:component skolem:lemma596;
    r:component skolem:lemma597;
    r:component skolem:lemma598;
    r:component skolem:lemma599;
    r:component skolem:lemma600;
    r:component skolem:lemma601;
    r:component skolem:lemma602;
    r:component skolem:lemma603;
    r:component skolem:lemma604;
    r:component skolem:lemma605;
    r:component skolem:lemma606;
    r:component skolem:lemma607;
    r:component skolem:lemma608;
    r:component skolem:lemma609;
    r:component skolem:lemma610;
    r:component skolem:lemma611;
    r:component skolem:lemma612;
    r:component skolem:lemma613;
    r:component skolem:lemma614;
    r:component skolem:lemma615;
    r:component skolem:lemma616;
    r:component skolem:lemma617;
    r:component skolem:lemma618;
    r:component skolem:lemma619;
    r:component skolem:lemma620;
    r:component skolem:lemma621;
    r:component skolem:lemma622;
    r:component skolem:lemma623;
    r:component skolem:lemma624;
    r:component skolem:lemma625;
    r:component skolem:lemma626;
    r:component skolem:lemma627;
    r:component skolem:lemma628;
    r:component skolem:lemma629;
    r:component skolem:lemma630;
    r:component skolem:lemma631;
    r:component skolem:lemma632;
    r:component skolem:lemma633;
    r:component skolem:lemma634;
    r:component skolem:lemma635;
    r:component skolem:lemma636;
    r:component skolem:lemma637;
    r:component skolem:lemma638;
    r:component skolem:lemma639;
    r:component skolem:lemma640;
    r:component skolem:lemma641;
    r:component skolem:lemma642;
    r:component skolem:lemma643;
    r:component skolem:lemma644;
    r:component skolem:lemma645;
    r:component skolem:lemma646;
    r:component skolem:lemma647;
    r:component skolem:lemma648;
    r:component skolem:lemma649;
    r:component skolem:lemma650;
    r:component skolem:lemma651;
    r:component skolem:lemma652;
    r:component skolem:lemma653;
    r:component skolem:lemma654;
    r:component skolem:lemma655;
    r:component skolem:lemma656;
    r:component skolem:lemma657;
    r:component skolem:lemma658;
    r:component skolem:lemma659;
    r:component skolem:lemma660;
    r:component skolem:lemma661;
    r:component skolem:lemma662;
    r:component skolem:lemma663;
    r:component skolem:lemma664;
    r:component skolem:lemma665;
    r:component skolem:lemma666;
    r:component skolem:lemma667;
    r:component skolem:lemma668;
    r:component skolem:lemma669;
    r:component skolem:lemma670;
    r:component skolem:lemma671;
    r:component skolem:lemma672;
    r:component skolem:lemma673;
    r:component skolem:lemma674;
    r:component skolem:lemma675;
    r:component skolem:lemma676;
    r:component skolem:lemma677;
    r:component skolem:lemma678;
    r:component skolem:lemma679;
    r:component skolem:lemma680;
    r:component skolem:lemma681;
    r:component skolem:lemma682;
    r:component skolem:lemma683;
    r:component skolem:lemma684;
    r:component skolem:lemma685;
    r:component skolem:lemma686;
    r:component skolem:lemma687;
    r:component skolem:lemma688;
    r:component skolem:lemma689;
    r:component skolem:lemma690;
    r:component skolem:lemma691;
    r:component skolem:lemma692;
    r:component skolem:lemma693;
    r:component skolem:lemma694;
    r:component skolem:lemma695;
    r:component skolem:lemma696;
    r:component skolem:lemma697;
    r:component skolem:lemma698;
    r:component skolem:lemma699;
    r:component skolem:lemma700;
    r:component skolem:lemma701;
    r:component skolem:lemma702;
    r:component skolem:lemma703;
    r:component skolem:lemma704;
    r:component skolem:lemma705;
    r:component skolem:lemma706;
    r:component skolem:lemma707;
    r:component skolem:lemma708;
    r:component skolem:lemma709;
    r:component skolem:lemma710;
    r:component skolem:lemma711;
    r:component skolem:lemma712;
    r:component skolem:lemma713;
    r:component skolem:lemma714;
    r:component skolem:lemma715;
    r:component skolem:lemma716;
    r:component skolem:lemma717;
    r:component skolem:lemma718;
    r:component skolem:lemma719;
    r:component skolem:lemma720;
    r:component skolem:lemma721;
    r:component skolem:lemma722;
    r:component skolem:lemma723;
    r:component skolem:lemma724;
    r:component skolem:lemma725;
    r:component skolem:lemma726;
    r:component skolem:lemma727;
    r:component skolem:lemma728;
    r:component skolem:lemma729;
    r:component skolem:lemma730;
    r:component skolem:lemma731;
    r:component skolem:lemma732;
    r:component skolem:lemma733;
    r:component skolem:lemma734;
    r:component skolem:lemma735;
    r:component skolem:lemma736;
    r:component skolem:lemma737;
    r:component skolem:lemma738;
    r:component skolem:lemma739;
    r:component skolem:lemma740;
    r:component skolem:lemma741;
    r:component skolem:lemma742;
    r:component skolem:lemma743;
    r:component skolem:lemma744;
    r:component skolem:lemma745;
    r:component skolem:lemma746;
    r:component skolem:lemma747;
    r:component skolem:lemma748;
    r:component skolem:lemma749;
    r:component skolem:lemma750;
    r:component skolem:lemma751;
    r:component skolem:lemma752;
    r:component skolem:lemma753;
    r:component skolem:lemma754;
    r:component skolem:lemma755;
    r:component skolem:lemma756;
    r:component skolem:lemma757;
    r:component skolem:lemma758;
    r:component skolem:lemma759;
    r:component skolem:lemma760;
    r:component skolem:lemma761;
    r:component skolem:lemma762;
    r:component skolem:lemma763;
    r:component skolem:lemma764;
    r:component skolem:lemma765;
    r:component skolem:lemma766;
    r:component skolem:lemma767;
    r:component skolem:lemma768;
    r:component skolem:lemma769;
    r:component skolem:lemma770;
    r:component skolem:lemma771;
    r:component skolem:lemma772;
    r:component skolem:lemma773;
    r:component skolem:lemma774;
    r:component skolem:lemma775;
    r:component skolem:lemma776;
    r:component skolem:lemma777;
    r:component skolem:lemma778;
    r:component skolem:lemma779;
    r:component skolem:lemma780;
    r:component skolem:lemma781;
    r:component skolem:lemma782;
    r:component skolem:lemma783;
    r:component skolem:lemma784;
    r:component skolem:lemma785;
    r:component skolem:lemma786;
    r:component skolem:lemma787;
    r:component skolem:lemma788;
    r:component skolem:lemma789;
    r:component skolem:lemma790;
    r:component skolem:lemma791;
    r:component skolem:lemma792;
    r:component skolem:lemma793;
    r:component skolem:lemma794;
    r:component skolem:lemma795;
    r:component skolem:lemma796;
    r:component skolem:lemma797;
    r:component skolem:lemma798;
    r:component skolem:lemma799;
    r:component skolem:lemma800;
    r:component skolem:lemma801;
    r:component skolem:lemma802;
    r:component skolem:lemma803;
    r:component skolem:lemma804;
    r:component skolem:lemma805;
    r:component skolem:lemma806;
    r:component skolem:lemma807;
    r:component skolem:lemma808;
    r:component skolem:lemma809;
    r:component skolem:lemma810;
    r:component skolem:lemma811;
    r:component skolem:lemma812;
    r:component skolem:lemma813;
    r:component skolem:lemma814;
    r:component skolem:lemma815;
    r:component skolem:lemma816;
    r:component skolem:lemma817;
    r:component skolem:lemma818;
    r:component skolem:lemma819;
    r:component skolem:lemma820;
    r:component skolem:lemma821;
    r:component skolem:lemma822;
    r:component skolem:lemma823;
    r:component skolem:lemma824;
    r:component skolem:lemma825;
    r:component skolem:lemma826;
    r:component skolem:lemma827;
    r:component skolem:lemma828;
    r:component skolem:lemma829;
    r:component skolem:lemma830;
    r:component skolem:lemma831;
    r:component skolem:lemma832;
    r:component skolem:lemma833;
    r:component skolem:lemma834;
    r:component skolem:lemma835;
    r:component skolem:lemma836;
    r:component skolem:lemma837;
    r:component skolem:lemma838;
    r:component skolem:lemma839;
    r:component skolem:lemma840;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma2 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma3 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma4 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma5 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma6 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma7 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma8 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma9 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma10 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma11 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma12 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma13 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma14 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma15 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma16 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma17 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma18 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma19 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma20 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma21 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma22 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma23 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma24 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma25 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma26 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma27 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma28 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma29 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma30 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma31 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma32 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma33 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma34 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma35 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma36 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma37 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma38 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma39 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma40 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma41 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma42 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:b :blue) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma43 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma44 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma45 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma46 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma47 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma48 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma49 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma50 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma51 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma52 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma53 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma54 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma55 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma56 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma57 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma58 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma59 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma60 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma61 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma62 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma63 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma64 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma65 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma66 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma67 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma68 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma69 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma70 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma71 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma72 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma73 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma74 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma75 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma76 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma77 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma78 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma79 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma80 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma81 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma82 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma83 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma84 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:c :green) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma85 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma86 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma87 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma88 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma89 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma90 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma91 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma92 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma93 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma94 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma95 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma96 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma97 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma98 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma99 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma100 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma101 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma102 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma103 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma104 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma105 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma106 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma107 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma108 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma109 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma110 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma111 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma112 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma113 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma114 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma115 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma116 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma117 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma118 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma119 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma120 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma121 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma122 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma123 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma124 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma125 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma126 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:d :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma127 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma128 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma129 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma130 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma131 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma132 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma133 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma134 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma135 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma136 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma137 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma138 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma139 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma140 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma141 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma142 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma143 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma144 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma145 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma146 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma147 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma148 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma149 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma150 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma151 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma152 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma153 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma154 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma155 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma156 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma157 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma158 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma159 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma160 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma161 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma162 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma163 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma164 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma165 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma166 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma167 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma168 a r:Inference;
    r:gives {
        :test :is (((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:a :red) (:e :blue) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma169 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma170 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma171 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma172 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma173 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma174 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma175 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma176 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma177 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma178 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma179 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma180 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma181 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma182 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:c :green) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma183 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma184 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma185 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma186 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma187 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma188 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma189 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma190 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma191 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma192 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma193 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma194 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma195 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma196 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:d :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma197 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma198 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma199 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma200 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma201 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma202 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma203 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma204 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma205 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma206 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma207 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma208 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma209 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma210 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:a :red) (:e :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma211 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma212 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma213 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma214 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma215 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma216 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma217 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma218 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma219 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma220 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma221 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma222 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma223 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma224 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma225 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma226 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma227 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma228 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma229 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma230 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma231 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma232 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma233 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma234 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma235 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma236 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma237 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma238 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma239 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma240 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma241 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma242 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma243 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma244 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma245 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma246 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma247 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma248 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma249 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma250 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma251 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma252 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:c :green) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma253 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma254 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma255 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma256 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma257 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma258 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma259 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma260 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma261 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma262 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma263 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma264 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma265 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma266 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma267 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma268 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma269 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma270 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma271 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma272 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma273 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma274 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma275 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma276 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma277 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma278 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma279 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma280 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma281 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma282 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma283 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma284 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma285 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma286 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma287 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma288 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma289 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma290 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma291 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma292 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma293 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma294 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:d :red) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma295 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma296 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma297 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma298 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma299 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma300 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma301 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma302 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma303 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma304 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma305 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma306 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma307 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma308 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma309 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma310 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma311 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma312 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma313 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma314 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma315 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma316 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma317 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma318 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma319 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma320 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma321 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma322 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma323 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma324 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma325 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma326 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma327 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma328 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma329 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma330 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma331 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma332 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma333 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma334 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma335 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma336 a r:Inference;
    r:gives {
        :test :is (((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:b :blue) (:e :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma337 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma338 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma339 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma340 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma341 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma342 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma343 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma344 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma345 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma346 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma347 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma348 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma349 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma350 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:b :blue) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma351 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma352 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma353 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma354 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma355 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma356 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma357 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma358 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma359 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma360 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma361 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma362 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma363 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma364 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:d :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma365 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma366 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma367 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma368 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma369 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma370 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma371 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma372 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma373 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma374 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma375 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma376 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma377 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma378 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:a :red) (:e :blue) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma379 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma380 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma381 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma382 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma383 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma384 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma385 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma386 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma387 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma388 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma389 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma390 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma391 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma392 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:a :red) (:e :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma393 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma394 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma395 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma396 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma397 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma398 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma399 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma400 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma401 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma402 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma403 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma404 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma405 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma406 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:d :red) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma407 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma408 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma409 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma410 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma411 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma412 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma413 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma414 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma415 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma416 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma417 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma418 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma419 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma420 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:b :blue) (:e :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma421 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma422 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma423 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma424 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma425 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma426 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma427 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma428 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma429 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma430 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma431 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma432 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma433 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma434 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma435 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma436 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma437 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma438 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma439 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma440 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma441 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma442 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma443 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma444 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma445 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma446 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma447 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma448 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma449 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma450 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma451 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma452 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma453 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma454 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma455 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma456 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma457 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma458 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma459 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma460 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma461 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma462 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:d :red) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma463 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma464 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma465 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma466 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma467 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma468 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma469 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma470 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma471 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma472 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma473 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma474 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma475 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma476 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma477 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma478 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma479 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma480 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma481 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma482 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma483 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma484 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma485 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma486 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma487 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma488 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma489 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma490 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma491 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma492 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma493 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma494 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma495 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma496 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma497 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma498 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma499 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma500 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma501 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma502 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma503 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma504 a r:Inference;
    r:gives {
        :test :is (((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:c :green) (:e :blue) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma505 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma506 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma507 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma508 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma509 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma510 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma511 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma512 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma513 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma514 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma515 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma516 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma517 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma518 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:b :blue) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma519 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma520 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma521 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma522 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma523 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma524 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma525 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma526 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma527 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma528 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma529 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma530 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma531 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma532 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:c :green) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma533 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma534 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma535 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma536 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma537 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma538 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma539 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma540 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma541 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma542 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma543 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma544 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma545 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma546 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:a :red) (:e :blue) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma547 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma548 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma549 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma550 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma551 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma552 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma553 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:c :green) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma554 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma555 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma556 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma557 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma558 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma559 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma560 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:a :red) (:e :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma561 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma562 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma563 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma564 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma565 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma566 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma567 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma568 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma569 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma570 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma571 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma572 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma573 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma574 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:c :green) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma575 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma576 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma577 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma578 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma579 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma580 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma581 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma582 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma583 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma584 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma585 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma586 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma587 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma588 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:b :blue) (:e :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma589 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma590 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma591 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma592 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma593 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma594 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma595 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:b :blue) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma596 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma597 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma598 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma599 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma600 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma601 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma602 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:a :red) (:e :blue) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma603 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma604 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma605 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma606 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma607 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma608 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma609 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:a :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma610 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma611 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma612 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma613 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma614 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma615 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma616 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:b :blue) (:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma617 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma618 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma619 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma620 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma621 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma622 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma623 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma624 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma625 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma626 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma627 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma628 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma629 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma630 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:c :green) (:e :blue) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma631 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma632 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma633 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma634 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma635 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma636 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma637 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma638 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma639 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma640 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma641 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma642 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma643 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma644 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma645 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma646 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma647 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma648 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma649 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma650 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma651 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma652 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma653 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma654 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma655 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma656 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma657 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma658 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma659 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma660 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma661 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma662 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma663 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma664 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma665 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma666 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma667 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma668 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma669 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma670 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma671 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma672 a r:Inference;
    r:gives {
        :test :is (((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:d :red) (:e :blue) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma673 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma674 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma675 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma676 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma677 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma678 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma679 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma680 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma681 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma682 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma683 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma684 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma685 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma686 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:b :blue) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma687 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma688 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma689 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma690 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma691 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma692 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma693 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma694 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma695 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma696 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma697 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma698 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma699 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma700 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:c :green) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma701 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma702 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma703 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma704 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma705 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma706 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma707 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma708 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma709 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma710 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma711 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma712 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma713 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma714 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:a :red) (:d :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma715 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma716 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma717 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma718 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma719 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma720 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma721 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma722 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma723 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma724 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma725 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma726 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma727 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma728 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:a :red) (:d :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma729 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma730 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma731 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma732 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma733 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma734 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma735 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma736 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma737 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma738 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma739 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma740 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma741 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma742 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:c :green) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma743 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma744 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma745 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma746 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma747 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma748 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma749 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma750 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma751 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma752 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma753 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma754 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma755 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma756 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:b :blue) (:d :red) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma757 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma758 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma759 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma760 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma761 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma762 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma763 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma764 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma765 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma766 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma767 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma768 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma769 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma770 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:a :red) (:d :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma771 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma772 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma773 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma774 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma775 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma776 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma777 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:a :red) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma778 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma779 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma780 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma781 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma782 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma783 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma784 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:b :blue) (:d :red) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma785 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma786 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma787 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma788 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma789 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma790 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma791 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma792 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma793 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma794 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma795 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma796 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma797 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma798 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:c :green) (:d :red) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma799 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma800 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma801 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma802 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma803 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma804 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma805 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma806 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma807 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma808 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma809 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma810 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma811 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma812 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:a :red) (:c :green) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma813 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma814 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma815 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma816 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma817 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma818 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma819 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma820 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma821 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma822 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma823 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma824 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma825 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma826 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:b :blue) (:c :green) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma827 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma828 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma829 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma830 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma831 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma832 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma833 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma834 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:a :b) ((:a :red) (:b :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :b)}]
        [ a r:Fact; r:gives {((:a :b) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:a :red) (:b :blue))}]
        [ a r:Fact; r:gives {((:a :red) (:b :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :b)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:b :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma835 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:b :c) ((:b :blue) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :c)}]
        [ a r:Fact; r:gives {((:b :c) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:c :green))}]
        [ a r:Fact; r:gives {((:b :blue) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma836 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:c :d) ((:c :green) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:c :d)}]
        [ a r:Fact; r:gives {((:c :d) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:c :green) (:d :red))}]
        [ a r:Fact; r:gives {((:c :green) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:c :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:c :green) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma837 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:d :e) ((:d :red) (:e :blue)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:d :e)}]
        [ a r:Fact; r:gives {((:d :e) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:d :red) (:e :blue))}]
        [ a r:Fact; r:gives {((:d :red) (:e :blue)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:d :e)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:d :red) (:e :blue))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma838 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:e :a) ((:e :blue) (:a :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:e :a)}]
        [ a r:Fact; r:gives {((:e :a) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:e :blue) (:a :red))}]
        [ a r:Fact; r:gives {((:e :blue) (:a :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:e :a)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:e :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma839 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:a :c) ((:a :red) (:c :green)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:a :c)}]
        [ a r:Fact; r:gives {((:a :c) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:a :red) (:c :green))}]
        [ a r:Fact; r:gives {((:a :red) (:c :green)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:a :c)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:a :red) (:c :green))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

skolem:lemma840 a r:Inference;
    r:gives {
        :test :is (((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red)) (:b :d) ((:b :blue) (:d :red)) :valid).
    };
    r:evidence (
        [ a r:Fact; r:gives {true :permuted_coloring ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))}]
        [ a r:Fact; r:gives {true :challenge_edge (:b :d)}]
        [ a r:Fact; r:gives {((:b :d) ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))) :prover_response ((:b :blue) (:d :red))}]
        [ a r:Fact; r:gives {((:b :blue) (:d :red)) :verify_response :valid}]
    );
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_0"]; r:boundTo ((:e :blue) (:d :red) (:c :green) (:b :blue) (:a :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_1"]; r:boundTo (:b :d)];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_2"]; r:boundTo ((:b :blue) (:d :red))];
    r:binding [ r:variable [ n3:uri "http://www.w3.org/2000/10/swap/var#x_3"]; r:boundTo [ n3:uri "http://example.org/#valid"]];
    r:rule [ a r:Fact; r:gives {@forSome var:x_0, var:x_1, var:x_2, var:x_3. {
        true :permuted_coloring var:x_0.
        true :challenge_edge var:x_1.
        (var:x_1 var:x_0) :prover_response var:x_2.
        var:x_2 :verify_response var:x_3.
    } => {
        :test :is (var:x_0 var:x_1 var:x_2 var:x_3).
    }}].

