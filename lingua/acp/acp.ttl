@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix : <http://example.org/ns#>.

:test1
    :policy :PolicyX;
    :has :A, :B, :C.

:PolicyX
    a :Policy;
    :allOf :A, :B;
    :anyOf :C;
    :noneOf :D.

:acp_rule1 a lingua:BackwardRule;
    lingua:vars (
        _:Pol
        _:Test
        _:Field
        _:X
    );
    lingua:conclusion (lingua:graph
        (_:Pol :pass :allOfTest)
    );
    lingua:premise (lingua:graph
        (_:Test :policy _:Pol)
        (_:Pol rdf:type :Policy)
        ((((_:Pol :allOf _:Field)) ((_:Test :has _:Field))) log:forAllIn _:X)
    ).

:acp_rule2 a lingua:BackwardRule;
    lingua:vars (
        _:Pol
        _:Test
        _:Field
        _:List
        _:X
        _:L
    );lingua:conclusion (lingua:graph
        (_:Pol :pass :anyOfTest)
    );
    lingua:premise (lingua:graph
        (_:Test :policy _:Pol)
        (_:Pol rdf:type :Policy)
        ((_:Field ((_:Pol :anyOf _:Field) (_:Test :has _:Field)) _:List) log:collectAllIn _:X)
        (_:List list:length _:L)
        (_:L log:notEqualTo 0)
    ).

:acp_rule3 a lingua:BackwardRule;
    lingua:vars (
        _:Pol
        _:Test
        _:Field
        _:List
        _:X
        _:L
    );
    lingua:conclusion (lingua:graph
        (_:Pol :pass :noneOfTest)
    );
    lingua:premise (lingua:graph
        (_:Test :policy _:Pol)
        (_:Pol rdf:type :Policy)
        ((_:Field ((_:Pol :noneOf _:Field) (_:Test :has _:Field)) _:List) log:collectAllIn _:X)
        (_:List list:length _:L)
        (_:L log:equalTo 0)
    ).

# query
:acp_query a lingua:QueryRule;
    lingua:vars (
        _:Pol
    );
    lingua:premise (lingua:graph
        (_:Pol rdf:type :Policy)
        (_:Pol :pass :allOfTest)
        (_:Pol :pass :anyOfTest)
        (_:Pol :pass :noneOfTest)
    );
    lingua:conclusion (lingua:graph
        (:test :for _:Pol)
        (:test :is true)
    ).
