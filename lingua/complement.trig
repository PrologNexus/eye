# ----------------------------------------
# Negation as envisioned by Wouter Termont
# ----------------------------------------

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix term: <http://www.w3.org/2000/10/swap/term#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# Each predicate in RDF represents a binary relation, i.e. a set of 2-tuples.
# For each of those relations you can formulate exactly one complementary
# relation, which contains exactly the pairs of elements that are not in the
# original set (from this follows LEM). If we represent the relationship
# between these complements by a predicate, e.g. log:complement, then we
# can express the following in pure RDF
#
# NOT {
#    term:s1 :p1 term:o1.
#    term:s2 :p2 term:o2.
#    term:s3 :p3 term:o3.
# }
:implication1 lingua:premise term:implication1_premise;
    lingua:conclusion term:implication1_conclusion.

term:implication1_premise {
    term:s1 :p1 term:o1.
    term:s2 :p2 term:o2.
}

term:implication1_conclusion {
    :c3 log:complement :p3.
    term:s3 :c3 term:o3.
}

:implication2 lingua:premise term:implication2_premise;
    lingua:conclusion term:implication2_conclusion.

term:implication2_premise {
    term:s2 :p2 term:o2.
    term:s3 :p3 term:o3.
}

term:implication2_conclusion {
    :c1 log:complement :p1.
    term:s1 :c1 term:o1.
}

:implication3 lingua:premise term:implication3_premise;
    lingua:conclusion term:implication3_conclusion.

term:implication3_premise {
    term:s3 :p3 term:o3.
    term:s1 :p1 term:o1.
}

term:implication3_conclusion {
    :c2 log:complement :p2.
    term:s2 :c2 term:o2.
}

# asserting the following should blow an inference fuse
term:s1 :p1 term:o1.
term:s2 :p2 term:o2.
term:s3 :p3 term:o3.

# fuse
:complement_inference_fuse lingua:premise term:complement_inference_fuse_premise;
    lingua:conclusion false.

term:complement_inference_fuse_premise {
    var:P log:complement var:C.
    var:S var:P var:O.
    var:S var:C var:O.
}
