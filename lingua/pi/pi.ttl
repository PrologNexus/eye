@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix : <http://example.org/ns#>.

:pi_rule1 a lingua:BackwardRule;
    lingua:vars (
        _:N
        _:Pi
        _:P
        _:A
    );
    lingua:conclusion (lingua:graph
        ((_:N _:Pi) :pi true)
    );
    lingua:premise (lingua:graph
        ((1 _:N 0 _:P 1) :pi true)
        ((4 _:P) math:product _:A)
        ((3 _:A) math:sum _:Pi)
    ).

:pi_rule2 a lingua:BackwardRule;
    lingua:vars (
        _:N
        _:P
        _:S
    );
    lingua:conclusion (lingua:graph
        ((_:N _:N _:P _:P _:S) :pi true)
    );
    lingua:premise (lingua:graph).

:pi_rule3 a lingua:BackwardRule;
    lingua:vars (
        _:K
        _:N
        _:P0
        _:P
        _:S
        _:K1
        _:K2
        _:A
        _:B
        _:C
        _:D
        _:P1
        _:S1
    );
    lingua:conclusion (lingua:graph
        ((_:K _:N _:P0 _:P _:S) :pi true)
    );
    lingua:premise (lingua:graph
        (_:K math:notEqualTo _:N)
        ((_:K 1) math:sum _:K1)
        ((2 _:K) math:product _:K2)
        ((_:K2 1) math:sum _:A)
        ((_:K2 2) math:sum _:B)
        ((_:K2 _:A _:B) math:product _:C)
        ((_:S _:C) math:quotient _:D)
        ((_:P0 _:D) math:sum _:P1)
        (_:S math:negation _:S1)
        ((_:K1 _:N _:P1 _:P _:S1) :pi true)
    ).

# query
:pi_query a lingua:QueryRule;
    lingua:vars (
        _:Pi
    );
    lingua:premise (lingua:graph
        ((1000 _:Pi) :pi true)
    );
    lingua:conclusion (lingua:graph
        ((1000 _:Pi) :pi true)
    ).
