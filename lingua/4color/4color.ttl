@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix : <http://example.org/ns#>.

# European countries and their neighbours
:Austria :neighbours (:Czech_Republic :Germany :Hungary :Italy :Slovenia :Slovakia).
:Belgium :neighbours (:France :Netherlands :Luxemburg :Germany :United_Kingdom).
:Bulgaria :neighbours (:Romania :Greece).
:Croatia :neighbours (:Slovenia :Hungary).
:Cyprus :neighbours (:Greece).
:Czech_Republic :neighbours (:Germany :Poland :Slovakia :Austria).
:Denmark :neighbours (:Germany :Sweden).
:Estonia :neighbours (:Finland :Latvia :Lithuania).
:Finland :neighbours (:Estonia :Sweden).
:France :neighbours (:Spain :Belgium :Luxemburg :Germany :Italy :United_Kingdom).
:Germany :neighbours (:Netherlands :Belgium :Luxemburg :Denmark :France :Austria :Poland :Czech_Republic).
:Greece :neighbours (:Bulgaria :Cyprus).
:Hungary :neighbours (:Austria :Slovakia :Romania :Croatia :Slovenia).
:Ireland :neighbours (:United_Kingdom).
:Italy :neighbours (:France :Austria :Slovenia).
:Latvia :neighbours (:Estonia :Lithuania).
:Lithuania :neighbours (:Estonia :Latvia :Poland).
:Luxemburg :neighbours (:Belgium :France :Germany).
:Malta :neighbours ().
:Netherlands :neighbours (:Belgium :Germany :United_Kingdom).
:Poland :neighbours (:Germany :Czech_Republic :Slovakia :Lithuania).
:Portugal :neighbours (:Spain).
:Romania :neighbours (:Hungary :Bulgaria).
:Slovakia :neighbours (:Czech_Republic :Poland :Hungary :Austria).
:Slovenia :neighbours (:Austria :Italy :Hungary :Croatia).
:Spain :neighbours (:France :Portugal).
:Sweden :neighbours (:Finland :Denmark).
:United_Kingdom :neighbours (:Ireland :Netherlands :Belgium :France).

# places
:places_rule1 a lingua:BackwardRule;
    lingua:vars ();
    lingua:conclusion (
        () :places true
    );
    lingua:premise ().

:places_rule2 a lingua:BackwardRule;
    lingua:vars (
        _:PLACES
        _:PLACE
        _:COLOR
        _:TAIL
        _:NEIGHBOURS
        _:NEIGHBOUR
        _:SCOPE
    );
    lingua:conclusion (
        _:PLACES :places true
    );
    lingua:premise (
        _:PLACES list:firstRest ((_:PLACE _:COLOR) _:TAIL)
        _:TAIL :places true
        _:PLACE :neighbours _:NEIGHBOURS
        (:red :green :blue :yellow) list:member _:COLOR
        (
            1
            (
                _:TAIL list:member (_:NEIGHBOUR _:COLOR)
                _:NEIGHBOURS list:member _:NEIGHBOUR
            )
            ()
        ) log:collectAllIn _:SCOPE
    ).

# query
:4color_query a lingua:QueryRule;
    lingua:vars (
        _:PLACE
        _:COLOR
        _:NEIGHBOURS
        _:LIST
        _:SCOPE
        _:PLACES
    );
    lingua:premise (
        (
            (_:PLACE _:COLOR)
            (
                _:PLACE :neighbours _:NEIGHBOURS
            )
            _:LIST
        ) log:collectAllIn _:SCOPE
        (_:LIST) func:reverse _:PLACES
        _:PLACES :places true
    );
    lingua:conclusion (
        _:PLACES :coloring true
    ).
