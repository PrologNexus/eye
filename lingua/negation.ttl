# ----------------
# Negation example
# ----------------
#
# Disjunction elimination using negation predicates.

@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# saying A means saying C
:negation_predicates_rule1 a lingua:ForwardRule;
    lingua:premise (lingua:graphTerm
        var:S :saying :A
    );
    lingua:conclusion (lingua:graphTerm
        var:S :saying :C
    ).

:negation_predicates_rule2 a lingua:ForwardRule;
    lingua:premise (lingua:graphTerm
        var:S :not_saying :C
    );
    lingua:conclusion (lingua:graphTerm
        var:S :not_saying :A
    ).

# saying B means saying C
:negation_predicates_rule3 a lingua:ForwardRule;
    lingua:premise (lingua:graphTerm
        var:S :saying :B
    );
    lingua:conclusion (lingua:graphTerm
        var:S :saying :C
    ).

:negation_predicates_rule4 a lingua:ForwardRule;
    lingua:premise (lingua:graphTerm
        var:S :not_saying :C
    );
    lingua:conclusion (lingua:graphTerm
        var:S :not_saying :B
    ).

# saying A or saying B
:negation_predicates_rule5 a lingua:ForwardRule;
    lingua:premise (lingua:graphTerm
        var:S :not_saying :A
    );
    lingua:conclusion (lingua:graphTerm
        var:S :saying :B
    ).

:negation_predicates_rule6 a lingua:ForwardRule;
    lingua:premise (lingua:graphTerm
        var:S :not_saying :B
    );
    lingua:conclusion (lingua:graphTerm
        var:S :saying :A
    ).

# assuming the negation of the query so that
# it can be discharged when the query succeeds
:alice :not_saying :C.

# query
:negation_predicates_query a lingua:QueryRule;
    lingua:premise (lingua:graphTerm
        :alice :saying :C
    );
    lingua:conclusion (lingua:graphTerm
        :alice :saying :C
    ).
