# ------------
# 4 Color test
# ------------
#
# See https://en.wikipedia.org/wiki/Four_color_theorem

@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# European countries
:Austria :neighbours (:Czech_Republic :Germany :Hungary :Italy :Slovenia :Slovakia).
:Belgium :neighbours (:France :Netherlands :Luxemburg :Germany :United_Kingdom).
:Bulgaria :neighbours (:Romania :Greece).
:Croatia :neighbours (:Slovenia :Hungary).
:Cyprus :neighbours (:Greece).
:Czech_Republic :neighbours (:Germany :Poland :Slovakia :Austria).
:Denmark :neighbours (:Germany :Sweden).
:Estonia :neighbours (:Finland :Latvia :Lithuania).
:Finland :neighbours (:Estonia :Sweden).
:France :neighbours (:Spain :Belgium :Luxemburg :Germany :Italy :United_Kingdom).
:Germany :neighbours (:Netherlands :Belgium :Luxemburg :Denmark :France :Austria :Poland :Czech_Republic).
:Greece :neighbours (:Bulgaria :Cyprus).
:Hungary :neighbours (:Austria :Slovakia :Romania :Croatia :Slovenia).
:Ireland :neighbours (:United_Kingdom).
:Italy :neighbours (:France :Austria :Slovenia).
:Latvia :neighbours (:Estonia :Lithuania).
:Lithuania :neighbours (:Estonia :Latvia :Poland).
:Luxemburg :neighbours (:Belgium :France :Germany).
:Malta :neighbours ().
:Netherlands :neighbours (:Belgium :Germany :United_Kingdom).
:Poland :neighbours (:Germany :Czech_Republic :Slovakia :Lithuania).
:Portugal :neighbours (:Spain).
:Romania :neighbours (:Hungary :Bulgaria).
:Slovakia :neighbours (:Czech_Republic :Poland :Hungary :Austria).
:Slovenia :neighbours (:Austria :Italy :Hungary :Croatia).
:Spain :neighbours (:France :Portugal).
:Sweden :neighbours (:Finland :Denmark).
:United_Kingdom :neighbours (:Ireland :Netherlands :Belgium :France).

# rules
:places_rule1 a lingua:BackwardRule;
    lingua:conclusion (
        () :places true
    );
    lingua:premise true.

:places_rule2 a lingua:BackwardRule;
    lingua:conclusion (
        var:PLACES :places true
    );
    lingua:premise (
        var:PLACES list:firstRest ((var:PLACE var:COLOR) var:TAIL)
        var:TAIL :places true
        var:PLACE :neighbours var:NEIGHBOURS
        (:red :green :blue :yellow) list:member var:COLOR
        (
            1
            (
                var:TAIL list:member (var:NEIGHBOUR var:COLOR)
                var:NEIGHBOURS list:member var:NEIGHBOUR
            )
            ()
        ) log:collectAllIn var:SCOPE
        true log:callWithCut true
    ).

# query
:query_rule a lingua:QueryRule;
    lingua:premise (
        (
            (var:PLACE var:COLOR)
            (
                var:PLACE :neighbours var:NEIGHBOURS
            )
            var:LIST
        ) log:collectAllIn var:SCOPE
        (var:LIST) func:reverse var:PLACES
        var:PLACES :places true
    );
    lingua:conclusion (
        var:PLACES :coloring true
    ).
