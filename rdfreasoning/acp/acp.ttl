@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix rule: <http://eyereasoner.github.io/rule#>.
@prefix : <urn:example:>.

:test1
    :policy :PolicyX;
    :has :A, :B, :C.

:PolicyX
    a :Policy;
    :allOf :A, :B;
    :anyOf :C;
    :noneOf :D.

[] a rule:BackwardRule;
    rule:conclusion (
        (_:Pol :pass :allOfTest)
    );
    rule:premise (
        (_:Test :policy _:Pol)
        (_:Pol rdf:type :Policy)
        ((((_:Pol :allOf _:Field)) ((_:Test :has _:Field))) log:forAllIn _:X)
    ).

[] a rule:BackwardRule;
    rule:conclusion (
        (_:Pol :pass :anyOfTest)
    );
    rule:premise (
        (_:Test :policy _:Pol)
        (_:Pol rdf:type :Policy)
        ((_:Field ((_:Pol :anyOf _:Field) (_:Test :has _:Field)) _:List) log:collectAllIn _:X)
        (_:List list:length _:L)
        (_:L log:notEqualTo 0)
    ).

[] a rule:BackwardRule;
    rule:conclusion (
        (_:Pol :pass :noneOfTest)
    );
    rule:premise (
        (_:Test :policy _:Pol)
        (_:Pol rdf:type :Policy)
        ((_:Field ((_:Pol :noneOf _:Field) (_:Test :has _:Field)) _:List) log:collectAllIn _:X)
        (_:List list:length _:L)
        (_:L log:equalTo 0)
    ).

[] a rule:QueryRule;
    rule:premise (
        (_:Pol rdf:type :Policy)
        (_:Pol :pass :allOfTest)
        (_:Pol :pass :anyOfTest)
        (_:Pol :pass :noneOfTest)
    );
    rule:conclusion (
        (:test :for _:Pol)
        (:test :is true)
    ).
